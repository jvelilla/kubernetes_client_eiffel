note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	COREV1_API

inherit

    API_I


feature -- API Access


	connect_core_v1_delete_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect DELETE requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_delete_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect DELETE requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_delete_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect DELETE requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_delete_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect DELETE requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_delete_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect DELETE requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_delete_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect DELETE requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_pod_attach (name: STRING_32; namespace: STRING_32; container: STRING_32; stderr: BOOLEAN; stdin: BOOLEAN; stdout: BOOLEAN; tty: BOOLEAN): detachable STRING_32
			-- 
			-- connect GET requests to attach of Pod
			-- 
			-- argument: name name of the PodAttachOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: container The container in which to execute the command. Defaults to only container if there is only one container in the pod. (optional, default to null)
			-- 
			-- argument: stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true. (optional, default to null)
			-- 
			-- argument: stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false. (optional, default to null)
			-- 
			-- argument: stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true. (optional, default to null)
			-- 
			-- argument: tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/attach"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "container", container));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stderr", stderr));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdin", stdin));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdout", stdout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "tty", tty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_pod_exec (name: STRING_32; namespace: STRING_32; command: STRING_32; container: STRING_32; stderr: BOOLEAN; stdin: BOOLEAN; stdout: BOOLEAN; tty: BOOLEAN): detachable STRING_32
			-- 
			-- connect GET requests to exec of Pod
			-- 
			-- argument: name name of the PodExecOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: command Command is the remote command to execute. argv array. Not executed within a shell. (optional, default to null)
			-- 
			-- argument: container Container in which to execute the command. Defaults to only container if there is only one container in the pod. (optional, default to null)
			-- 
			-- argument: stderr Redirect the standard error stream of the pod for this call. (optional, default to null)
			-- 
			-- argument: stdin Redirect the standard input stream of the pod for this call. Defaults to false. (optional, default to null)
			-- 
			-- argument: stdout Redirect the standard output stream of the pod for this call. (optional, default to null)
			-- 
			-- argument: tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/exec"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "command", command));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "container", container));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stderr", stderr));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdin", stdin));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdout", stdout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "tty", tty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_pod_portforward (name: STRING_32; namespace: STRING_32; ports: INTEGER_32): detachable STRING_32
			-- 
			-- connect GET requests to portforward of Pod
			-- 
			-- argument: name name of the PodPortForwardOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: ports List of ports to forward Required when using WebSockets (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/portforward"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ports", ports));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect GET requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect GET requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect GET requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect GET requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect GET requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_get_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect GET requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_head_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect HEAD requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Head", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_head_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect HEAD requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Head", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_head_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect HEAD requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Head", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_head_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect HEAD requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Head", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_head_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect HEAD requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Head", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_head_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect HEAD requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Head", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_options_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect OPTIONS requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Options", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_options_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect OPTIONS requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Options", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_options_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect OPTIONS requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Options", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_options_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect OPTIONS requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Options", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_options_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect OPTIONS requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Options", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_options_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect OPTIONS requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Options", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_patch_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect PATCH requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_patch_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect PATCH requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_patch_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect PATCH requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_patch_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect PATCH requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_patch_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect PATCH requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_patch_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect PATCH requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_pod_attach (name: STRING_32; namespace: STRING_32; container: STRING_32; stderr: BOOLEAN; stdin: BOOLEAN; stdout: BOOLEAN; tty: BOOLEAN): detachable STRING_32
			-- 
			-- connect POST requests to attach of Pod
			-- 
			-- argument: name name of the PodAttachOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: container The container in which to execute the command. Defaults to only container if there is only one container in the pod. (optional, default to null)
			-- 
			-- argument: stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true. (optional, default to null)
			-- 
			-- argument: stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false. (optional, default to null)
			-- 
			-- argument: stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true. (optional, default to null)
			-- 
			-- argument: tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/attach"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "container", container));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stderr", stderr));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdin", stdin));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdout", stdout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "tty", tty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_pod_exec (name: STRING_32; namespace: STRING_32; command: STRING_32; container: STRING_32; stderr: BOOLEAN; stdin: BOOLEAN; stdout: BOOLEAN; tty: BOOLEAN): detachable STRING_32
			-- 
			-- connect POST requests to exec of Pod
			-- 
			-- argument: name name of the PodExecOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: command Command is the remote command to execute. argv array. Not executed within a shell. (optional, default to null)
			-- 
			-- argument: container Container in which to execute the command. Defaults to only container if there is only one container in the pod. (optional, default to null)
			-- 
			-- argument: stderr Redirect the standard error stream of the pod for this call. (optional, default to null)
			-- 
			-- argument: stdin Redirect the standard input stream of the pod for this call. Defaults to false. (optional, default to null)
			-- 
			-- argument: stdout Redirect the standard output stream of the pod for this call. (optional, default to null)
			-- 
			-- argument: tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/exec"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "command", command));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "container", container));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stderr", stderr));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdin", stdin));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stdout", stdout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "tty", tty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_pod_portforward (name: STRING_32; namespace: STRING_32; ports: INTEGER_32): detachable STRING_32
			-- 
			-- connect POST requests to portforward of Pod
			-- 
			-- argument: name name of the PodPortForwardOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: ports List of ports to forward Required when using WebSockets (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/portforward"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ports", ports));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect POST requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect POST requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect POST requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect POST requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect POST requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_post_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect POST requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_put_namespaced_pod_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect PUT requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_put_namespaced_pod_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect PUT requests to proxy of Pod
			-- 
			-- argument: name name of the PodProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to pod. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_put_namespaced_service_proxy (name: STRING_32; namespace: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect PUT requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_put_namespaced_service_proxy_with_path (name: STRING_32; namespace: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect PUT requests to proxy of Service
			-- 
			-- argument: name name of the ServiceProxyOptions (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_put_node_proxy (name: STRING_32; path: STRING_32): detachable STRING_32
			-- 
			-- connect PUT requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	connect_core_v1_put_node_proxy_with_path (name: STRING_32; path: STRING_32; path2: STRING_32): detachable STRING_32
			-- 
			-- connect PUT requests to proxy of Node
			-- 
			-- argument: name name of the NodeProxyOptions (required)
			-- 
			-- argument: path path to the resource (required)
			-- 
			-- argument: path2 Path is the URL path to use for the current proxy request to node. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/proxy/{path}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	core_v1_ap_iresources : detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_API_RESOURCE_LIST
			-- 
			-- get available resources
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_API_RESOURCE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_API_RESOURCE_LIST } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_API_RESOURCE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespace (body: IO_K8S_API_CORE_V1_NAMESPACE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- create a Namespace
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_binding (namespace: STRING_32; body: IO_K8S_API_CORE_V1_BINDING; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_BINDING
			-- 
			-- create a Binding
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_BINDING
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/bindings"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_BINDING } l_response.data ({ IO_K8S_API_CORE_V1_BINDING }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_config_map (namespace: STRING_32; body: IO_K8S_API_CORE_V1_CONFIG_MAP; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_CONFIG_MAP
			-- 
			-- create a ConfigMap
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_CONFIG_MAP
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/configmaps"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_CONFIG_MAP } l_response.data ({ IO_K8S_API_CORE_V1_CONFIG_MAP }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_endpoints (namespace: STRING_32; body: IO_K8S_API_CORE_V1_ENDPOINTS; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_ENDPOINTS
			-- 
			-- create Endpoints
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_ENDPOINTS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/endpoints"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_ENDPOINTS } l_response.data ({ IO_K8S_API_CORE_V1_ENDPOINTS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_event (namespace: STRING_32; body: IO_K8S_API_CORE_V1_EVENT; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_EVENT
			-- 
			-- create an Event
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/events"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_EVENT } l_response.data ({ IO_K8S_API_CORE_V1_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_limit_range (namespace: STRING_32; body: IO_K8S_API_CORE_V1_LIMIT_RANGE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_LIMIT_RANGE
			-- 
			-- create a LimitRange
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_LIMIT_RANGE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/limitranges"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_LIMIT_RANGE } l_response.data ({ IO_K8S_API_CORE_V1_LIMIT_RANGE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_persistent_volume_claim (namespace: STRING_32; body: IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- create a PersistentVolumeClaim
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_pod (namespace: STRING_32; body: IO_K8S_API_CORE_V1_POD; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- create a Pod
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_pod_binding (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_BINDING; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_BINDING
			-- 
			-- create binding of a Pod
			-- 
			-- argument: name name of the Binding (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_BINDING
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/binding"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_BINDING } l_response.data ({ IO_K8S_API_CORE_V1_BINDING }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_pod_eviction (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_POLICY_V1_EVICTION; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; pretty: STRING_32): detachable IO_K8S_API_POLICY_V1_EVICTION
			-- 
			-- create eviction of a Pod
			-- 
			-- argument: name name of the Eviction (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_POLICY_V1_EVICTION
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/eviction"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_POLICY_V1_EVICTION } l_response.data ({ IO_K8S_API_POLICY_V1_EVICTION }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_pod_template (namespace: STRING_32; body: IO_K8S_API_CORE_V1_POD_TEMPLATE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE
			-- 
			-- create a PodTemplate
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/podtemplates"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_replication_controller (namespace: STRING_32; body: IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- create a ReplicationController
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_resource_quota (namespace: STRING_32; body: IO_K8S_API_CORE_V1_RESOURCE_QUOTA; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- create a ResourceQuota
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_secret (namespace: STRING_32; body: IO_K8S_API_CORE_V1_SECRET; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SECRET
			-- 
			-- create a Secret
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SECRET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/secrets"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SECRET } l_response.data ({ IO_K8S_API_CORE_V1_SECRET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_service (namespace: STRING_32; body: IO_K8S_API_CORE_V1_SERVICE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- create a Service
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_service_account (namespace: STRING_32; body: IO_K8S_API_CORE_V1_SERVICE_ACCOUNT; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
			-- 
			-- create a ServiceAccount
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_namespaced_service_account_token (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_AUTHENTICATION_V1_TOKEN_REQUEST; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; pretty: STRING_32): detachable IO_K8S_API_AUTHENTICATION_V1_TOKEN_REQUEST
			-- 
			-- create token of a ServiceAccount
			-- 
			-- argument: name name of the TokenRequest (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_AUTHENTICATION_V1_TOKEN_REQUEST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_AUTHENTICATION_V1_TOKEN_REQUEST } l_response.data ({ IO_K8S_API_AUTHENTICATION_V1_TOKEN_REQUEST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_node (body: IO_K8S_API_CORE_V1_NODE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- create a Node
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_core_v1_persistent_volume (body: IO_K8S_API_CORE_V1_PERSISTENT_VOLUME; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- create a PersistentVolume
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_config_map (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of ConfigMap
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/configmaps"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_endpoints (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of Endpoints
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/endpoints"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_event (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of Event
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/events"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_limit_range (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of LimitRange
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/limitranges"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_persistent_volume_claim (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of PersistentVolumeClaim
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_pod (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of Pod
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_pod_template (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of PodTemplate
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/podtemplates"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_replication_controller (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of ReplicationController
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_resource_quota (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of ResourceQuota
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_secret (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of Secret
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/secrets"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_service (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of Service
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_namespaced_service_account (namespace: STRING_32; pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of ServiceAccount
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_node (pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of Node
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_collection_persistent_volume (pretty: STRING_32; continue: STRING_32; dry_run: STRING_32; field_selector: STRING_32; grace_period_seconds: INTEGER_32; label_selector: STRING_32; limit: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete collection of PersistentVolume
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespace (name: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete a Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_config_map (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete a ConfigMap
			-- 
			-- argument: name name of the ConfigMap (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/configmaps/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_endpoints (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete Endpoints
			-- 
			-- argument: name name of the Endpoints (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/endpoints/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_event (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete an Event
			-- 
			-- argument: name name of the Event (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/events/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_limit_range (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete a LimitRange
			-- 
			-- argument: name name of the LimitRange (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/limitranges/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_persistent_volume_claim (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- delete a PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_pod (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- delete a Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_pod_template (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE
			-- 
			-- delete a PodTemplate
			-- 
			-- argument: name name of the PodTemplate (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/podtemplates/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_replication_controller (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete a ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_resource_quota (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- delete a ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_secret (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete a Secret
			-- 
			-- argument: name name of the Secret (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/secrets/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_service (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- delete a Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_namespaced_service_account (name: STRING_32; namespace: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
			-- 
			-- delete a ServiceAccount
			-- 
			-- argument: name name of the ServiceAccount (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_node (name: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
			-- 
			-- delete a Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_core_v1_persistent_volume (name: STRING_32; pretty: STRING_32; dry_run: STRING_32; grace_period_seconds: INTEGER_32; orphan_dependents: BOOLEAN; propagation_policy: STRING_32; body: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_DELETE_OPTIONS): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- delete a PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional, default to null)
			-- 
			-- argument: orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional, default to null)
			-- 
			-- argument: propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. (optional, default to null)
			-- 
			-- argument: body  (optional)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "gracePeriodSeconds", grace_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "orphanDependents", orphan_dependents));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "propagationPolicy", propagation_policy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_component_status (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_COMPONENT_STATUS_LIST
			-- 
			-- list objects of kind ComponentStatus
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_COMPONENT_STATUS_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/componentstatuses"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_COMPONENT_STATUS_LIST } l_response.data ({ IO_K8S_API_CORE_V1_COMPONENT_STATUS_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_config_map_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_CONFIG_MAP_LIST
			-- 
			-- list or watch objects of kind ConfigMap
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_CONFIG_MAP_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/configmaps"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_CONFIG_MAP_LIST } l_response.data ({ IO_K8S_API_CORE_V1_CONFIG_MAP_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_endpoints_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_ENDPOINTS_LIST
			-- 
			-- list or watch objects of kind Endpoints
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_ENDPOINTS_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/endpoints"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_ENDPOINTS_LIST } l_response.data ({ IO_K8S_API_CORE_V1_ENDPOINTS_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_event_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_EVENT_LIST
			-- 
			-- list or watch objects of kind Event
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_EVENT_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/events"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_EVENT_LIST } l_response.data ({ IO_K8S_API_CORE_V1_EVENT_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_limit_range_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST
			-- 
			-- list or watch objects of kind LimitRange
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/limitranges"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespace (pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_NAMESPACE_LIST
			-- 
			-- list or watch objects of kind Namespace
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_config_map (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_CONFIG_MAP_LIST
			-- 
			-- list or watch objects of kind ConfigMap
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_CONFIG_MAP_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/configmaps"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_CONFIG_MAP_LIST } l_response.data ({ IO_K8S_API_CORE_V1_CONFIG_MAP_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_endpoints (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_ENDPOINTS_LIST
			-- 
			-- list or watch objects of kind Endpoints
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_ENDPOINTS_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/endpoints"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_ENDPOINTS_LIST } l_response.data ({ IO_K8S_API_CORE_V1_ENDPOINTS_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_event (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_EVENT_LIST
			-- 
			-- list or watch objects of kind Event
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_EVENT_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/events"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_EVENT_LIST } l_response.data ({ IO_K8S_API_CORE_V1_EVENT_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_limit_range (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST
			-- 
			-- list or watch objects of kind LimitRange
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/limitranges"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_LIMIT_RANGE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_persistent_volume_claim (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST
			-- 
			-- list or watch objects of kind PersistentVolumeClaim
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_pod (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD_LIST
			-- 
			-- list or watch objects of kind Pod
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_LIST } l_response.data ({ IO_K8S_API_CORE_V1_POD_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_pod_template (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST
			-- 
			-- list or watch objects of kind PodTemplate
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/podtemplates"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_replication_controller (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST
			-- 
			-- list or watch objects of kind ReplicationController
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_resource_quota (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST
			-- 
			-- list or watch objects of kind ResourceQuota
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_secret (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_SECRET_LIST
			-- 
			-- list or watch objects of kind Secret
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SECRET_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/secrets"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SECRET_LIST } l_response.data ({ IO_K8S_API_CORE_V1_SECRET_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_service (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE_LIST
			-- 
			-- list or watch objects of kind Service
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_namespaced_service_account (namespace: STRING_32; pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST
			-- 
			-- list or watch objects of kind ServiceAccount
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_node (pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_NODE_LIST
			-- 
			-- list or watch objects of kind Node
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_NODE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_persistent_volume (pretty: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_LIST
			-- 
			-- list or watch objects of kind PersistentVolume
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/persistentvolumes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_LIST } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_persistent_volume_claim_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST
			-- 
			-- list or watch objects of kind PersistentVolumeClaim
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/persistentvolumeclaims"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_pod_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD_LIST
			-- 
			-- list or watch objects of kind Pod
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/pods"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_LIST } l_response.data ({ IO_K8S_API_CORE_V1_POD_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_pod_template_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST
			-- 
			-- list or watch objects of kind PodTemplate
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/podtemplates"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_replication_controller_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST
			-- 
			-- list or watch objects of kind ReplicationController
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/replicationcontrollers"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_resource_quota_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST
			-- 
			-- list or watch objects of kind ResourceQuota
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/resourcequotas"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_secret_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_SECRET_LIST
			-- 
			-- list or watch objects of kind Secret
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SECRET_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/secrets"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SECRET_LIST } l_response.data ({ IO_K8S_API_CORE_V1_SECRET_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_service_account_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST
			-- 
			-- list or watch objects of kind ServiceAccount
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/serviceaccounts"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_core_v1_service_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE_LIST
			-- 
			-- list or watch objects of kind Service
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/services"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_LIST } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespace (name: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- partially update the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespace_status (name: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- partially update status of the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_config_map (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_CONFIG_MAP
			-- 
			-- partially update the specified ConfigMap
			-- 
			-- argument: name name of the ConfigMap (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_CONFIG_MAP
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/configmaps/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_CONFIG_MAP } l_response.data ({ IO_K8S_API_CORE_V1_CONFIG_MAP }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_endpoints (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_ENDPOINTS
			-- 
			-- partially update the specified Endpoints
			-- 
			-- argument: name name of the Endpoints (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_ENDPOINTS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/endpoints/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_ENDPOINTS } l_response.data ({ IO_K8S_API_CORE_V1_ENDPOINTS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_event (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_EVENT
			-- 
			-- partially update the specified Event
			-- 
			-- argument: name name of the Event (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/events/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_EVENT } l_response.data ({ IO_K8S_API_CORE_V1_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_limit_range (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_LIMIT_RANGE
			-- 
			-- partially update the specified LimitRange
			-- 
			-- argument: name name of the LimitRange (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_LIMIT_RANGE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/limitranges/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_LIMIT_RANGE } l_response.data ({ IO_K8S_API_CORE_V1_LIMIT_RANGE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_persistent_volume_claim (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- partially update the specified PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_persistent_volume_claim_status (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- partially update status of the specified PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_pod (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- partially update the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_pod_ephemeralcontainers (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- partially update ephemeralcontainers of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_pod_status (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- partially update status of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_pod_template (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE
			-- 
			-- partially update the specified PodTemplate
			-- 
			-- argument: name name of the PodTemplate (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/podtemplates/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_replication_controller (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- partially update the specified ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_replication_controller_scale (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_AUTOSCALING_V1_SCALE
			-- 
			-- partially update scale of the specified ReplicationController
			-- 
			-- argument: name name of the Scale (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_AUTOSCALING_V1_SCALE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_AUTOSCALING_V1_SCALE } l_response.data ({ IO_K8S_API_AUTOSCALING_V1_SCALE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_replication_controller_status (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- partially update status of the specified ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_resource_quota (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- partially update the specified ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_resource_quota_status (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- partially update status of the specified ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_secret (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_SECRET
			-- 
			-- partially update the specified Secret
			-- 
			-- argument: name name of the Secret (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SECRET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/secrets/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SECRET } l_response.data ({ IO_K8S_API_CORE_V1_SECRET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_service (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- partially update the specified Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_service_account (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
			-- 
			-- partially update the specified ServiceAccount
			-- 
			-- argument: name name of the ServiceAccount (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_namespaced_service_status (name: STRING_32; namespace: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- partially update status of the specified Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_node (name: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- partially update the specified Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_node_status (name: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- partially update status of the specified Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_persistent_volume (name: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- partially update the specified PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	patch_core_v1_persistent_volume_status (name: STRING_32; body: ANY; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; force: BOOLEAN): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- partially update status of the specified PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "force", force));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_component_status (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_COMPONENT_STATUS
			-- 
			-- read the specified ComponentStatus
			-- 
			-- argument: name name of the ComponentStatus (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_COMPONENT_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/componentstatuses/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_COMPONENT_STATUS } l_response.data ({ IO_K8S_API_CORE_V1_COMPONENT_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespace (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- read the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespace_status (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- read status of the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_config_map (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_CONFIG_MAP
			-- 
			-- read the specified ConfigMap
			-- 
			-- argument: name name of the ConfigMap (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_CONFIG_MAP
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/configmaps/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_CONFIG_MAP } l_response.data ({ IO_K8S_API_CORE_V1_CONFIG_MAP }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_endpoints (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_ENDPOINTS
			-- 
			-- read the specified Endpoints
			-- 
			-- argument: name name of the Endpoints (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_ENDPOINTS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/endpoints/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_ENDPOINTS } l_response.data ({ IO_K8S_API_CORE_V1_ENDPOINTS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_event (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_EVENT
			-- 
			-- read the specified Event
			-- 
			-- argument: name name of the Event (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/events/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_EVENT } l_response.data ({ IO_K8S_API_CORE_V1_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_limit_range (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_LIMIT_RANGE
			-- 
			-- read the specified LimitRange
			-- 
			-- argument: name name of the LimitRange (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_LIMIT_RANGE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/limitranges/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_LIMIT_RANGE } l_response.data ({ IO_K8S_API_CORE_V1_LIMIT_RANGE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_persistent_volume_claim (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- read the specified PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_persistent_volume_claim_status (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- read status of the specified PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_pod (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- read the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_pod_ephemeralcontainers (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- read ephemeralcontainers of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_pod_log (name: STRING_32; namespace: STRING_32; container: STRING_32; follow: BOOLEAN; insecure_skip_tl_sverify_backend: BOOLEAN; limit_bytes: INTEGER_32; pretty: STRING_32; previous: BOOLEAN; since_seconds: INTEGER_32; tail_lines: INTEGER_32; timestamps: BOOLEAN): detachable STRING_32
			-- 
			-- read log of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: container The container for which to stream logs. Defaults to only container if there is one container in the pod. (optional, default to null)
			-- 
			-- argument: follow Follow the log stream of the pod. Defaults to false. (optional, default to null)
			-- 
			-- argument: insecure_skip_tl_sverify_backend insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). (optional, default to null)
			-- 
			-- argument: limit_bytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: previous Return previous terminated container logs. Defaults to false. (optional, default to null)
			-- 
			-- argument: since_seconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. (optional, default to null)
			-- 
			-- argument: tail_lines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime (optional, default to null)
			-- 
			-- argument: timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/log"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "container", container));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "follow", follow));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "insecureSkipTLSVerifyBackend", insecure_skip_tl_sverify_backend));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limitBytes", limit_bytes));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "previous", previous));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sinceSeconds", since_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "tailLines", tail_lines));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timestamps", timestamps));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_pod_status (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- read status of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_pod_template (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE
			-- 
			-- read the specified PodTemplate
			-- 
			-- argument: name name of the PodTemplate (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/podtemplates/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_replication_controller (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- read the specified ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_replication_controller_scale (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_AUTOSCALING_V1_SCALE
			-- 
			-- read scale of the specified ReplicationController
			-- 
			-- argument: name name of the Scale (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_AUTOSCALING_V1_SCALE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_AUTOSCALING_V1_SCALE } l_response.data ({ IO_K8S_API_AUTOSCALING_V1_SCALE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_replication_controller_status (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- read status of the specified ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_resource_quota (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- read the specified ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_resource_quota_status (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- read status of the specified ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_secret (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_SECRET
			-- 
			-- read the specified Secret
			-- 
			-- argument: name name of the Secret (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SECRET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/secrets/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SECRET } l_response.data ({ IO_K8S_API_CORE_V1_SECRET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_service (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- read the specified Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_service_account (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
			-- 
			-- read the specified ServiceAccount
			-- 
			-- argument: name name of the ServiceAccount (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_namespaced_service_status (name: STRING_32; namespace: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- read status of the specified Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_node (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- read the specified Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_node_status (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- read status of the specified Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/nodes/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_persistent_volume (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- read the specified PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/persistentvolumes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	read_core_v1_persistent_volume_status (name: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- read status of the specified PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/persistentvolumes/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespace (name: STRING_32; body: IO_K8S_API_CORE_V1_NAMESPACE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- replace the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespace_finalize (name: STRING_32; body: IO_K8S_API_CORE_V1_NAMESPACE; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32; pretty: STRING_32): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- replace finalize of the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{name}/finalize"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespace_status (name: STRING_32; body: IO_K8S_API_CORE_V1_NAMESPACE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_NAMESPACE
			-- 
			-- replace status of the specified Namespace
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NAMESPACE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NAMESPACE } l_response.data ({ IO_K8S_API_CORE_V1_NAMESPACE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_config_map (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_CONFIG_MAP; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_CONFIG_MAP
			-- 
			-- replace the specified ConfigMap
			-- 
			-- argument: name name of the ConfigMap (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_CONFIG_MAP
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/configmaps/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_CONFIG_MAP } l_response.data ({ IO_K8S_API_CORE_V1_CONFIG_MAP }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_endpoints (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_ENDPOINTS; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_ENDPOINTS
			-- 
			-- replace the specified Endpoints
			-- 
			-- argument: name name of the Endpoints (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_ENDPOINTS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/endpoints/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_ENDPOINTS } l_response.data ({ IO_K8S_API_CORE_V1_ENDPOINTS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_event (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_EVENT; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_EVENT
			-- 
			-- replace the specified Event
			-- 
			-- argument: name name of the Event (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/events/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_EVENT } l_response.data ({ IO_K8S_API_CORE_V1_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_limit_range (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_LIMIT_RANGE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_LIMIT_RANGE
			-- 
			-- replace the specified LimitRange
			-- 
			-- argument: name name of the LimitRange (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_LIMIT_RANGE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/limitranges/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_LIMIT_RANGE } l_response.data ({ IO_K8S_API_CORE_V1_LIMIT_RANGE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_persistent_volume_claim (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- replace the specified PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_persistent_volume_claim_status (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
			-- 
			-- replace status of the specified PersistentVolumeClaim
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_pod (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_POD; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- replace the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_pod_ephemeralcontainers (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_POD; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- replace ephemeralcontainers of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_pod_status (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_POD; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_POD
			-- 
			-- replace status of the specified Pod
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/pods/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD } l_response.data ({ IO_K8S_API_CORE_V1_POD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_pod_template (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_POD_TEMPLATE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_POD_TEMPLATE
			-- 
			-- replace the specified PodTemplate
			-- 
			-- argument: name name of the PodTemplate (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_POD_TEMPLATE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/podtemplates/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_POD_TEMPLATE } l_response.data ({ IO_K8S_API_CORE_V1_POD_TEMPLATE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_replication_controller (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- replace the specified ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_replication_controller_scale (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_AUTOSCALING_V1_SCALE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_AUTOSCALING_V1_SCALE
			-- 
			-- replace scale of the specified ReplicationController
			-- 
			-- argument: name name of the Scale (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_AUTOSCALING_V1_SCALE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_AUTOSCALING_V1_SCALE } l_response.data ({ IO_K8S_API_AUTOSCALING_V1_SCALE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_replication_controller_status (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
			-- 
			-- replace status of the specified ReplicationController
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER } l_response.data ({ IO_K8S_API_CORE_V1_REPLICATION_CONTROLLER }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_resource_quota (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_RESOURCE_QUOTA; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- replace the specified ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_resource_quota_status (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_RESOURCE_QUOTA; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_RESOURCE_QUOTA
			-- 
			-- replace status of the specified ResourceQuota
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_RESOURCE_QUOTA
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_RESOURCE_QUOTA } l_response.data ({ IO_K8S_API_CORE_V1_RESOURCE_QUOTA }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_secret (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_SECRET; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SECRET
			-- 
			-- replace the specified Secret
			-- 
			-- argument: name name of the Secret (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SECRET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/secrets/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SECRET } l_response.data ({ IO_K8S_API_CORE_V1_SECRET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_service (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_SERVICE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- replace the specified Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_service_account (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_SERVICE_ACCOUNT; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
			-- 
			-- replace the specified ServiceAccount
			-- 
			-- argument: name name of the ServiceAccount (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE_ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/serviceaccounts/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE_ACCOUNT } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE_ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_namespaced_service_status (name: STRING_32; namespace: STRING_32; body: IO_K8S_API_CORE_V1_SERVICE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_SERVICE
			-- 
			-- replace status of the specified Service
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_SERVICE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/namespaces/{namespace}/services/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_SERVICE } l_response.data ({ IO_K8S_API_CORE_V1_SERVICE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_node (name: STRING_32; body: IO_K8S_API_CORE_V1_NODE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- replace the specified Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_node_status (name: STRING_32; body: IO_K8S_API_CORE_V1_NODE; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_NODE
			-- 
			-- replace status of the specified Node
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_NODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/nodes/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_NODE } l_response.data ({ IO_K8S_API_CORE_V1_NODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_persistent_volume (name: STRING_32; body: IO_K8S_API_CORE_V1_PERSISTENT_VOLUME; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- replace the specified PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	replace_core_v1_persistent_volume_status (name: STRING_32; body: IO_K8S_API_CORE_V1_PERSISTENT_VOLUME; pretty: STRING_32; dry_run: STRING_32; field_manager: STRING_32; field_validation: STRING_32): detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
			-- 
			-- replace status of the specified PersistentVolume
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: body  (required)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: dry_run When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional, default to null)
			-- 
			-- argument: field_manager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. (optional, default to null)
			-- 
			-- argument: field_validation fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the &#x60;ServerSideFieldValidation&#x60; feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_API_CORE_V1_PERSISTENT_VOLUME
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/api/v1/persistentvolumes/{name}/status"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dryRun", dry_run));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldManager", field_manager));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldValidation", field_validation));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_API_CORE_V1_PERSISTENT_VOLUME } l_response.data ({ IO_K8S_API_CORE_V1_PERSISTENT_VOLUME }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_config_map_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ConfigMap. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/configmaps"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_endpoints_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Endpoints. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/endpoints"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_event_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Event. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/events"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_limit_range_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of LimitRange. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/limitranges"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespace (name: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Namespace. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Namespace (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespace_list (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Namespace. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_config_map (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind ConfigMap. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the ConfigMap (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/configmaps/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_config_map_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ConfigMap. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/configmaps"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_endpoints (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Endpoints. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Endpoints (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/endpoints/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_endpoints_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Endpoints. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/endpoints"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_event (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Event. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Event (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/events/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_event_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Event. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/events"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_limit_range (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind LimitRange. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the LimitRange (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/limitranges/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_limit_range_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of LimitRange. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/limitranges"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_persistent_volume_claim (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind PersistentVolumeClaim. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the PersistentVolumeClaim (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_persistent_volume_claim_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of PersistentVolumeClaim. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_pod (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Pod. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Pod (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/pods/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_pod_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Pod. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/pods"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_pod_template (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind PodTemplate. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the PodTemplate (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_pod_template_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of PodTemplate. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/podtemplates"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_replication_controller (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind ReplicationController. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the ReplicationController (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_replication_controller_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ReplicationController. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/replicationcontrollers"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_resource_quota (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind ResourceQuota. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the ResourceQuota (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_resource_quota_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ResourceQuota. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/resourcequotas"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_secret (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Secret. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Secret (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/secrets/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_secret_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Secret. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/secrets"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_service (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Service. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Service (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/services/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_service_account (name: STRING_32; namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind ServiceAccount. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the ServiceAccount (required)
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_service_account_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ServiceAccount. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/serviceaccounts"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_namespaced_service_list (namespace: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Service. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: namespace object name and auth scope, such as for teams and projects (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/namespaces/{namespace}/services"
			l_path.replace_substring_all ("{"+"namespace"+"}", api_client.url_encode (namespace.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_node (name: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind Node. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the Node (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/nodes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_node_list (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Node. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/nodes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_persistent_volume (name: STRING_32; allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch changes to an object of kind PersistentVolume. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
			-- 
			-- argument: name name of the PersistentVolume (required)
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/persistentvolumes/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_persistent_volume_claim_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of PersistentVolumeClaim. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/persistentvolumeclaims"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_persistent_volume_list (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of PersistentVolume. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/persistentvolumes"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_pod_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Pod. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/pods"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_pod_template_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of PodTemplate. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/podtemplates"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_replication_controller_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ReplicationController. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/replicationcontrollers"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_resource_quota_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ResourceQuota. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/resourcequotas"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_secret_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Secret. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/secrets"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_service_account_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of ServiceAccount. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/serviceaccounts"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	watch_core_v1_service_list_for_all_namespaces (allow_watch_bookmarks: BOOLEAN; continue: STRING_32; field_selector: STRING_32; label_selector: STRING_32; limit: INTEGER_32; pretty: STRING_32; resource_version: STRING_32; resource_version_match: STRING_32; timeout_seconds: INTEGER_32; watch: BOOLEAN): detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
			-- 
			-- watch individual changes to a list of Service. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
			-- 
			-- argument: allow_watch_bookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. (optional, default to null)
			-- 
			-- argument: continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional, default to null)
			-- 
			-- argument: field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional, default to null)
			-- 
			-- argument: label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional, default to null)
			-- 
			-- argument: limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional, default to null)
			-- 
			-- argument: pretty If &#39;true&#39;, then the output is pretty printed. (optional, default to null)
			-- 
			-- argument: resource_version resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: resource_version_match resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset (optional, default to null)
			-- 
			-- argument: timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. (optional, default to null)
			-- 
			-- argument: watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional, default to null)
			-- 
			-- 
			-- Result IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/v1/watch/services"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allowWatchBookmarks", allow_watch_bookmarks));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "continue", continue));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fieldSelector", field_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "labelSelector", label_selector));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pretty", pretty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersion", resource_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "resourceVersionMatch", resource_version_match));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timeoutSeconds", timeout_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "watch", watch));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"BearerToken">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT } l_response.data ({ IO_K8S_APIMACHINERY_PKG_APIS_META_V1_WATCH_EVENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
