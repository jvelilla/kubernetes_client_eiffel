note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_NETWORKING_V1_INGRESS_SPEC




feature --Access

    default_backend: detachable IO_K8S_API_NETWORKING_V1_INGRESS_BACKEND
      
    ingress_class_name: detachable STRING_32
      -- IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
    rules: detachable LIST [IO_K8S_API_NETWORKING_V1_INGRESS_RULE]
      -- A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    tls: detachable LIST [IO_K8S_API_NETWORKING_V1_INGRESS_TLS]
      -- TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.

feature -- Change Element

    set_default_backend (a_name: like default_backend)
        -- Set 'default_backend' with 'a_name'.
      do
        default_backend := a_name
      ensure
        default_backend_set: default_backend = a_name
      end

    set_ingress_class_name (a_name: like ingress_class_name)
        -- Set 'ingress_class_name' with 'a_name'.
      do
        ingress_class_name := a_name
      ensure
        ingress_class_name_set: ingress_class_name = a_name
      end

    set_rules (a_name: like rules)
        -- Set 'rules' with 'a_name'.
      do
        rules := a_name
      ensure
        rules_set: rules = a_name
      end

    set_tls (a_name: like tls)
        -- Set 'tls' with 'a_name'.
      do
        tls := a_name
      ensure
        tls_set: tls = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_NETWORKING_V1_INGRESS_SPEC%N")
        if attached default_backend as l_default_backend then
          Result.append ("%Ndefault_backend:")
          Result.append (l_default_backend.out)
          Result.append ("%N")
        end
        if attached ingress_class_name as l_ingress_class_name then
          Result.append ("%Ningress_class_name:")
          Result.append (l_ingress_class_name.out)
          Result.append ("%N")
        end
        if attached rules as l_rules then
          across l_rules as ic loop
            Result.append ("%N rules:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached tls as l_tls then
          across l_tls as ic loop
            Result.append ("%N tls:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

