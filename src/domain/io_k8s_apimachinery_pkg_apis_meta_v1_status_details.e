note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS_DETAILS




feature --Access

    causes: detachable LIST [IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS_CAUSE]
      -- The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
    group: detachable STRING_32
      -- The group attribute of the resource associated with the status StatusReason.
    kind: detachable STRING_32
      -- The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name: detachable STRING_32
      -- The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
 	retry_after_seconds: INTEGER_32
    	 -- If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
    uid: detachable STRING_32
      -- UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids

feature -- Change Element

    set_causes (a_name: like causes)
        -- Set 'causes' with 'a_name'.
      do
        causes := a_name
      ensure
        causes_set: causes = a_name
      end

    set_group (a_name: like group)
        -- Set 'group' with 'a_name'.
      do
        group := a_name
      ensure
        group_set: group = a_name
      end

    set_kind (a_name: like kind)
        -- Set 'kind' with 'a_name'.
      do
        kind := a_name
      ensure
        kind_set: kind = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_retry_after_seconds (a_name: like retry_after_seconds)
        -- Set 'retry_after_seconds' with 'a_name'.
      do
        retry_after_seconds := a_name
      ensure
        retry_after_seconds_set: retry_after_seconds = a_name
      end

    set_uid (a_name: like uid)
        -- Set 'uid' with 'a_name'.
      do
        uid := a_name
      ensure
        uid_set: uid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_APIMACHINERY_PKG_APIS_META_V1_STATUS_DETAILS%N")
        if attached causes as l_causes then
          across l_causes as ic loop
            Result.append ("%N causes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached group as l_group then
          Result.append ("%Ngroup:")
          Result.append (l_group.out)
          Result.append ("%N")
        end
        if attached kind as l_kind then
          Result.append ("%Nkind:")
          Result.append (l_kind.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached retry_after_seconds as l_retry_after_seconds then
          Result.append ("%Nretry_after_seconds:")
          Result.append (l_retry_after_seconds.out)
          Result.append ("%N")
        end
        if attached uid as l_uid then
          Result.append ("%Nuid:")
          Result.append (l_uid.out)
          Result.append ("%N")
        end
      end
end

