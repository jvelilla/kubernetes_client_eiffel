note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_BATCH_V1_JOB_STATUS




feature --Access

 	active: INTEGER_32
    	 -- The number of pending and running pods.
    completed_indexes: detachable STRING_32
      -- CompletedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\".
    completion_time: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    conditions: detachable LIST [IO_K8S_API_BATCH_V1_JOB_CONDITION]
      -- The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
 	failed: INTEGER_32
    	 -- The number of pods which reached phase Failed.
 	ready: INTEGER_32
    	 -- The number of pods which have a Ready condition.  This field is alpha-level. The job controller populates the field when the feature gate JobReadyPods is enabled (disabled by default).
    start_time: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
 	succeeded: INTEGER_32
    	 -- The number of pods which reached phase Succeeded.
    uncounted_terminated_pods: detachable IO_K8S_API_BATCH_V1_UNCOUNTED_TERMINATED_PODS
      

feature -- Change Element

    set_active (a_name: like active)
        -- Set 'active' with 'a_name'.
      do
        active := a_name
      ensure
        active_set: active = a_name
      end

    set_completed_indexes (a_name: like completed_indexes)
        -- Set 'completed_indexes' with 'a_name'.
      do
        completed_indexes := a_name
      ensure
        completed_indexes_set: completed_indexes = a_name
      end

    set_completion_time (a_name: like completion_time)
        -- Set 'completion_time' with 'a_name'.
      do
        completion_time := a_name
      ensure
        completion_time_set: completion_time = a_name
      end

    set_conditions (a_name: like conditions)
        -- Set 'conditions' with 'a_name'.
      do
        conditions := a_name
      ensure
        conditions_set: conditions = a_name
      end

    set_failed (a_name: like failed)
        -- Set 'failed' with 'a_name'.
      do
        failed := a_name
      ensure
        failed_set: failed = a_name
      end

    set_ready (a_name: like ready)
        -- Set 'ready' with 'a_name'.
      do
        ready := a_name
      ensure
        ready_set: ready = a_name
      end

    set_start_time (a_name: like start_time)
        -- Set 'start_time' with 'a_name'.
      do
        start_time := a_name
      ensure
        start_time_set: start_time = a_name
      end

    set_succeeded (a_name: like succeeded)
        -- Set 'succeeded' with 'a_name'.
      do
        succeeded := a_name
      ensure
        succeeded_set: succeeded = a_name
      end

    set_uncounted_terminated_pods (a_name: like uncounted_terminated_pods)
        -- Set 'uncounted_terminated_pods' with 'a_name'.
      do
        uncounted_terminated_pods := a_name
      ensure
        uncounted_terminated_pods_set: uncounted_terminated_pods = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_BATCH_V1_JOB_STATUS%N")
        if attached active as l_active then
          Result.append ("%Nactive:")
          Result.append (l_active.out)
          Result.append ("%N")
        end
        if attached completed_indexes as l_completed_indexes then
          Result.append ("%Ncompleted_indexes:")
          Result.append (l_completed_indexes.out)
          Result.append ("%N")
        end
        if attached completion_time as l_completion_time then
          Result.append ("%Ncompletion_time:")
          Result.append (l_completion_time.out)
          Result.append ("%N")
        end
        if attached conditions as l_conditions then
          across l_conditions as ic loop
            Result.append ("%N conditions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached failed as l_failed then
          Result.append ("%Nfailed:")
          Result.append (l_failed.out)
          Result.append ("%N")
        end
        if attached ready as l_ready then
          Result.append ("%Nready:")
          Result.append (l_ready.out)
          Result.append ("%N")
        end
        if attached start_time as l_start_time then
          Result.append ("%Nstart_time:")
          Result.append (l_start_time.out)
          Result.append ("%N")
        end
        if attached succeeded as l_succeeded then
          Result.append ("%Nsucceeded:")
          Result.append (l_succeeded.out)
          Result.append ("%N")
        end
        if attached uncounted_terminated_pods as l_uncounted_terminated_pods then
          Result.append ("%Nuncounted_terminated_pods:")
          Result.append (l_uncounted_terminated_pods.out)
          Result.append ("%N")
        end
      end
end

