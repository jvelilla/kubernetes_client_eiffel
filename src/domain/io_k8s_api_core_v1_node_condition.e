note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_NODE_CONDITION




feature --Access

    last_heartbeat_time: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    last_transition_time: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    message: detachable STRING_32
      -- Human readable message indicating details about last transition.
    reason: detachable STRING_32
      -- (brief) reason for the condition's last transition.
    status: detachable STRING_32
      -- Status of the condition, one of True, False, Unknown.
    type: detachable STRING_32
      -- Type of node condition.  Possible enum values:  - `\"DiskPressure\"` means the kubelet is under pressure due to insufficient available disk.  - `\"MemoryPressure\"` means the kubelet is under pressure due to insufficient available memory.  - `\"NetworkUnavailable\"` means that network for the node is not correctly configured.  - `\"PIDPressure\"` means the kubelet is under pressure due to insufficient available PID.  - `\"Ready\"` means kubelet is healthy and ready to accept pods.

feature -- Change Element

    set_last_heartbeat_time (a_name: like last_heartbeat_time)
        -- Set 'last_heartbeat_time' with 'a_name'.
      do
        last_heartbeat_time := a_name
      ensure
        last_heartbeat_time_set: last_heartbeat_time = a_name
      end

    set_last_transition_time (a_name: like last_transition_time)
        -- Set 'last_transition_time' with 'a_name'.
      do
        last_transition_time := a_name
      ensure
        last_transition_time_set: last_transition_time = a_name
      end

    set_message (a_name: like message)
        -- Set 'message' with 'a_name'.
      do
        message := a_name
      ensure
        message_set: message = a_name
      end

    set_reason (a_name: like reason)
        -- Set 'reason' with 'a_name'.
      do
        reason := a_name
      ensure
        reason_set: reason = a_name
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_NODE_CONDITION%N")
        if attached last_heartbeat_time as l_last_heartbeat_time then
          Result.append ("%Nlast_heartbeat_time:")
          Result.append (l_last_heartbeat_time.out)
          Result.append ("%N")
        end
        if attached last_transition_time as l_last_transition_time then
          Result.append ("%Nlast_transition_time:")
          Result.append (l_last_transition_time.out)
          Result.append ("%N")
        end
        if attached message as l_message then
          Result.append ("%Nmessage:")
          Result.append (l_message.out)
          Result.append ("%N")
        end
        if attached reason as l_reason then
          Result.append ("%Nreason:")
          Result.append (l_reason.out)
          Result.append ("%N")
        end
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
      end
end

