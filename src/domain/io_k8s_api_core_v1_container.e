note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_CONTAINER




feature --Access

    args: detachable LIST [STRING_32]
      -- Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command: detachable LIST [STRING_32]
      -- Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env: detachable LIST [IO_K8S_API_CORE_V1_ENV_VAR]
      -- List of environment variables to set in the container. Cannot be updated.
    env_from: detachable LIST [IO_K8S_API_CORE_V1_ENV_FROM_SOURCE]
      -- List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    image: detachable STRING_32
      -- Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    image_pull_policy: detachable STRING_32
      -- Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images  Possible enum values:  - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.  - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.  - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
    lifecycle: detachable IO_K8S_API_CORE_V1_LIFECYCLE
      
    liveness_probe: detachable IO_K8S_API_CORE_V1_PROBE
      
    name: detachable STRING_32
      -- Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    ports: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER_PORT]
      -- List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
    readiness_probe: detachable IO_K8S_API_CORE_V1_PROBE
      
    resources: detachable IO_K8S_API_CORE_V1_RESOURCE_REQUIREMENTS
      
    security_context: detachable IO_K8S_API_CORE_V1_SECURITY_CONTEXT
      
    startup_probe: detachable IO_K8S_API_CORE_V1_PROBE
      
 	stdin: BOOLEAN
    	 -- Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
 	stdin_once: BOOLEAN
    	 -- Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    termination_message_path: detachable STRING_32
      -- Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    termination_message_policy: detachable STRING_32
      -- Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.  Possible enum values:  - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.  - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.
 	tty: BOOLEAN
    	 -- Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    volume_devices: detachable LIST [IO_K8S_API_CORE_V1_VOLUME_DEVICE]
      -- volumeDevices is the list of block devices to be used by the container.
    volume_mounts: detachable LIST [IO_K8S_API_CORE_V1_VOLUME_MOUNT]
      -- Pod volumes to mount into the container's filesystem. Cannot be updated.
    working_dir: detachable STRING_32
      -- Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.

feature -- Change Element

    set_args (a_name: like args)
        -- Set 'args' with 'a_name'.
      do
        args := a_name
      ensure
        args_set: args = a_name
      end

    set_command (a_name: like command)
        -- Set 'command' with 'a_name'.
      do
        command := a_name
      ensure
        command_set: command = a_name
      end

    set_env (a_name: like env)
        -- Set 'env' with 'a_name'.
      do
        env := a_name
      ensure
        env_set: env = a_name
      end

    set_env_from (a_name: like env_from)
        -- Set 'env_from' with 'a_name'.
      do
        env_from := a_name
      ensure
        env_from_set: env_from = a_name
      end

    set_image (a_name: like image)
        -- Set 'image' with 'a_name'.
      do
        image := a_name
      ensure
        image_set: image = a_name
      end

    set_image_pull_policy (a_name: like image_pull_policy)
        -- Set 'image_pull_policy' with 'a_name'.
      do
        image_pull_policy := a_name
      ensure
        image_pull_policy_set: image_pull_policy = a_name
      end

    set_lifecycle (a_name: like lifecycle)
        -- Set 'lifecycle' with 'a_name'.
      do
        lifecycle := a_name
      ensure
        lifecycle_set: lifecycle = a_name
      end

    set_liveness_probe (a_name: like liveness_probe)
        -- Set 'liveness_probe' with 'a_name'.
      do
        liveness_probe := a_name
      ensure
        liveness_probe_set: liveness_probe = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_ports (a_name: like ports)
        -- Set 'ports' with 'a_name'.
      do
        ports := a_name
      ensure
        ports_set: ports = a_name
      end

    set_readiness_probe (a_name: like readiness_probe)
        -- Set 'readiness_probe' with 'a_name'.
      do
        readiness_probe := a_name
      ensure
        readiness_probe_set: readiness_probe = a_name
      end

    set_resources (a_name: like resources)
        -- Set 'resources' with 'a_name'.
      do
        resources := a_name
      ensure
        resources_set: resources = a_name
      end

    set_security_context (a_name: like security_context)
        -- Set 'security_context' with 'a_name'.
      do
        security_context := a_name
      ensure
        security_context_set: security_context = a_name
      end

    set_startup_probe (a_name: like startup_probe)
        -- Set 'startup_probe' with 'a_name'.
      do
        startup_probe := a_name
      ensure
        startup_probe_set: startup_probe = a_name
      end

    set_stdin (a_name: like stdin)
        -- Set 'stdin' with 'a_name'.
      do
        stdin := a_name
      ensure
        stdin_set: stdin = a_name
      end

    set_stdin_once (a_name: like stdin_once)
        -- Set 'stdin_once' with 'a_name'.
      do
        stdin_once := a_name
      ensure
        stdin_once_set: stdin_once = a_name
      end

    set_termination_message_path (a_name: like termination_message_path)
        -- Set 'termination_message_path' with 'a_name'.
      do
        termination_message_path := a_name
      ensure
        termination_message_path_set: termination_message_path = a_name
      end

    set_termination_message_policy (a_name: like termination_message_policy)
        -- Set 'termination_message_policy' with 'a_name'.
      do
        termination_message_policy := a_name
      ensure
        termination_message_policy_set: termination_message_policy = a_name
      end

    set_tty (a_name: like tty)
        -- Set 'tty' with 'a_name'.
      do
        tty := a_name
      ensure
        tty_set: tty = a_name
      end

    set_volume_devices (a_name: like volume_devices)
        -- Set 'volume_devices' with 'a_name'.
      do
        volume_devices := a_name
      ensure
        volume_devices_set: volume_devices = a_name
      end

    set_volume_mounts (a_name: like volume_mounts)
        -- Set 'volume_mounts' with 'a_name'.
      do
        volume_mounts := a_name
      ensure
        volume_mounts_set: volume_mounts = a_name
      end

    set_working_dir (a_name: like working_dir)
        -- Set 'working_dir' with 'a_name'.
      do
        working_dir := a_name
      ensure
        working_dir_set: working_dir = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_CONTAINER%N")
        if attached args as l_args then
          across l_args as ic loop
            Result.append ("%N args:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached command as l_command then
          across l_command as ic loop
            Result.append ("%N command:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached env as l_env then
          across l_env as ic loop
            Result.append ("%N env:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached env_from as l_env_from then
          across l_env_from as ic loop
            Result.append ("%N env_from:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached image as l_image then
          Result.append ("%Nimage:")
          Result.append (l_image.out)
          Result.append ("%N")
        end
        if attached image_pull_policy as l_image_pull_policy then
          Result.append ("%Nimage_pull_policy:")
          Result.append (l_image_pull_policy.out)
          Result.append ("%N")
        end
        if attached lifecycle as l_lifecycle then
          Result.append ("%Nlifecycle:")
          Result.append (l_lifecycle.out)
          Result.append ("%N")
        end
        if attached liveness_probe as l_liveness_probe then
          Result.append ("%Nliveness_probe:")
          Result.append (l_liveness_probe.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached ports as l_ports then
          across l_ports as ic loop
            Result.append ("%N ports:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached readiness_probe as l_readiness_probe then
          Result.append ("%Nreadiness_probe:")
          Result.append (l_readiness_probe.out)
          Result.append ("%N")
        end
        if attached resources as l_resources then
          Result.append ("%Nresources:")
          Result.append (l_resources.out)
          Result.append ("%N")
        end
        if attached security_context as l_security_context then
          Result.append ("%Nsecurity_context:")
          Result.append (l_security_context.out)
          Result.append ("%N")
        end
        if attached startup_probe as l_startup_probe then
          Result.append ("%Nstartup_probe:")
          Result.append (l_startup_probe.out)
          Result.append ("%N")
        end
        if attached stdin as l_stdin then
          Result.append ("%Nstdin:")
          Result.append (l_stdin.out)
          Result.append ("%N")
        end
        if attached stdin_once as l_stdin_once then
          Result.append ("%Nstdin_once:")
          Result.append (l_stdin_once.out)
          Result.append ("%N")
        end
        if attached termination_message_path as l_termination_message_path then
          Result.append ("%Ntermination_message_path:")
          Result.append (l_termination_message_path.out)
          Result.append ("%N")
        end
        if attached termination_message_policy as l_termination_message_policy then
          Result.append ("%Ntermination_message_policy:")
          Result.append (l_termination_message_policy.out)
          Result.append ("%N")
        end
        if attached tty as l_tty then
          Result.append ("%Ntty:")
          Result.append (l_tty.out)
          Result.append ("%N")
        end
        if attached volume_devices as l_volume_devices then
          across l_volume_devices as ic loop
            Result.append ("%N volume_devices:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached volume_mounts as l_volume_mounts then
          across l_volume_mounts as ic loop
            Result.append ("%N volume_mounts:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached working_dir as l_working_dir then
          Result.append ("%Nworking_dir:")
          Result.append (l_working_dir.out)
          Result.append ("%N")
        end
      end
end

