note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_POD_SPEC




feature --Access

 	active_deadline_seconds: INTEGER_64
    	 -- Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    affinity: detachable IO_K8S_API_CORE_V1_AFFINITY
      
 	automount_service_account_token: BOOLEAN
    	 -- AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    containers: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER]
      -- List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
    dns_config: detachable IO_K8S_API_CORE_V1_POD_DNS_CONFIG
      
    dns_policy: detachable STRING_32
      -- Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.  Possible enum values:  - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.  - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
 	enable_service_links: BOOLEAN
    	 -- EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
    ephemeral_containers: detachable LIST [IO_K8S_API_CORE_V1_EPHEMERAL_CONTAINER]
      -- List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
    host_aliases: detachable LIST [IO_K8S_API_CORE_V1_HOST_ALIAS]
      -- HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
 	host_ip_c: BOOLEAN
    	 -- Use the host's ipc namespace. Optional: Default to false.
 	host_network: BOOLEAN
    	 -- Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
 	host_pi_d: BOOLEAN
    	 -- Use the host's pid namespace. Optional: Default to false.
    hostname: detachable STRING_32
      -- Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    image_pull_secrets: detachable LIST [IO_K8S_API_CORE_V1_LOCAL_OBJECT_REFERENCE]
      -- ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    init_containers: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER]
      -- List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    node_name: detachable STRING_32
      -- NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    node_selector: detachable STRING_TABLE [STRING_32]
      -- NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    os: detachable IO_K8S_API_CORE_V1_POD_OS
      
    overhead: detachable STRING_TABLE [STRING_32]
      -- Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.
    preemption_policy: detachable STRING_32
      -- PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
 	priority: INTEGER_32
    	 -- The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
    priority_class_name: detachable STRING_32
      -- If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    readiness_gates: detachable LIST [IO_K8S_API_CORE_V1_POD_READINESS_GATE]
      -- If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
    restart_policy: detachable STRING_32
      -- Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy  Possible enum values:  - `\"Always\"`  - `\"Never\"`  - `\"OnFailure\"`
    runtime_class_name: detachable STRING_32
      -- RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.
    scheduler_name: detachable STRING_32
      -- If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    security_context: detachable IO_K8S_API_CORE_V1_POD_SECURITY_CONTEXT
      
    service_account: detachable STRING_32
      -- DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    service_account_name: detachable STRING_32
      -- ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
 	set_hostname_as_fq_dn: BOOLEAN
    	 -- If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
 	share_process_namespace: BOOLEAN
    	 -- Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
    subdomain: detachable STRING_32
      -- If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
 	termination_grace_period_seconds: INTEGER_64
    	 -- Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    tolerations: detachable LIST [IO_K8S_API_CORE_V1_TOLERATION]
      -- If specified, the pod's tolerations.
    topology_spread_constraints: detachable LIST [IO_K8S_API_CORE_V1_TOPOLOGY_SPREAD_CONSTRAINT]
      -- TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
    volumes: detachable LIST [IO_K8S_API_CORE_V1_VOLUME]
      -- List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes

feature -- Change Element

    set_active_deadline_seconds (a_name: like active_deadline_seconds)
        -- Set 'active_deadline_seconds' with 'a_name'.
      do
        active_deadline_seconds := a_name
      ensure
        active_deadline_seconds_set: active_deadline_seconds = a_name
      end

    set_affinity (a_name: like affinity)
        -- Set 'affinity' with 'a_name'.
      do
        affinity := a_name
      ensure
        affinity_set: affinity = a_name
      end

    set_automount_service_account_token (a_name: like automount_service_account_token)
        -- Set 'automount_service_account_token' with 'a_name'.
      do
        automount_service_account_token := a_name
      ensure
        automount_service_account_token_set: automount_service_account_token = a_name
      end

    set_containers (a_name: like containers)
        -- Set 'containers' with 'a_name'.
      do
        containers := a_name
      ensure
        containers_set: containers = a_name
      end

    set_dns_config (a_name: like dns_config)
        -- Set 'dns_config' with 'a_name'.
      do
        dns_config := a_name
      ensure
        dns_config_set: dns_config = a_name
      end

    set_dns_policy (a_name: like dns_policy)
        -- Set 'dns_policy' with 'a_name'.
      do
        dns_policy := a_name
      ensure
        dns_policy_set: dns_policy = a_name
      end

    set_enable_service_links (a_name: like enable_service_links)
        -- Set 'enable_service_links' with 'a_name'.
      do
        enable_service_links := a_name
      ensure
        enable_service_links_set: enable_service_links = a_name
      end

    set_ephemeral_containers (a_name: like ephemeral_containers)
        -- Set 'ephemeral_containers' with 'a_name'.
      do
        ephemeral_containers := a_name
      ensure
        ephemeral_containers_set: ephemeral_containers = a_name
      end

    set_host_aliases (a_name: like host_aliases)
        -- Set 'host_aliases' with 'a_name'.
      do
        host_aliases := a_name
      ensure
        host_aliases_set: host_aliases = a_name
      end

    set_host_ip_c (a_name: like host_ip_c)
        -- Set 'host_ip_c' with 'a_name'.
      do
        host_ip_c := a_name
      ensure
        host_ip_c_set: host_ip_c = a_name
      end

    set_host_network (a_name: like host_network)
        -- Set 'host_network' with 'a_name'.
      do
        host_network := a_name
      ensure
        host_network_set: host_network = a_name
      end

    set_host_pi_d (a_name: like host_pi_d)
        -- Set 'host_pi_d' with 'a_name'.
      do
        host_pi_d := a_name
      ensure
        host_pi_d_set: host_pi_d = a_name
      end

    set_hostname (a_name: like hostname)
        -- Set 'hostname' with 'a_name'.
      do
        hostname := a_name
      ensure
        hostname_set: hostname = a_name
      end

    set_image_pull_secrets (a_name: like image_pull_secrets)
        -- Set 'image_pull_secrets' with 'a_name'.
      do
        image_pull_secrets := a_name
      ensure
        image_pull_secrets_set: image_pull_secrets = a_name
      end

    set_init_containers (a_name: like init_containers)
        -- Set 'init_containers' with 'a_name'.
      do
        init_containers := a_name
      ensure
        init_containers_set: init_containers = a_name
      end

    set_node_name (a_name: like node_name)
        -- Set 'node_name' with 'a_name'.
      do
        node_name := a_name
      ensure
        node_name_set: node_name = a_name
      end

    set_node_selector (a_name: like node_selector)
        -- Set 'node_selector' with 'a_name'.
      do
        node_selector := a_name
      ensure
        node_selector_set: node_selector = a_name
      end

    set_os (a_name: like os)
        -- Set 'os' with 'a_name'.
      do
        os := a_name
      ensure
        os_set: os = a_name
      end

    set_overhead (a_name: like overhead)
        -- Set 'overhead' with 'a_name'.
      do
        overhead := a_name
      ensure
        overhead_set: overhead = a_name
      end

    set_preemption_policy (a_name: like preemption_policy)
        -- Set 'preemption_policy' with 'a_name'.
      do
        preemption_policy := a_name
      ensure
        preemption_policy_set: preemption_policy = a_name
      end

    set_priority (a_name: like priority)
        -- Set 'priority' with 'a_name'.
      do
        priority := a_name
      ensure
        priority_set: priority = a_name
      end

    set_priority_class_name (a_name: like priority_class_name)
        -- Set 'priority_class_name' with 'a_name'.
      do
        priority_class_name := a_name
      ensure
        priority_class_name_set: priority_class_name = a_name
      end

    set_readiness_gates (a_name: like readiness_gates)
        -- Set 'readiness_gates' with 'a_name'.
      do
        readiness_gates := a_name
      ensure
        readiness_gates_set: readiness_gates = a_name
      end

    set_restart_policy (a_name: like restart_policy)
        -- Set 'restart_policy' with 'a_name'.
      do
        restart_policy := a_name
      ensure
        restart_policy_set: restart_policy = a_name
      end

    set_runtime_class_name (a_name: like runtime_class_name)
        -- Set 'runtime_class_name' with 'a_name'.
      do
        runtime_class_name := a_name
      ensure
        runtime_class_name_set: runtime_class_name = a_name
      end

    set_scheduler_name (a_name: like scheduler_name)
        -- Set 'scheduler_name' with 'a_name'.
      do
        scheduler_name := a_name
      ensure
        scheduler_name_set: scheduler_name = a_name
      end

    set_security_context (a_name: like security_context)
        -- Set 'security_context' with 'a_name'.
      do
        security_context := a_name
      ensure
        security_context_set: security_context = a_name
      end

    set_service_account (a_name: like service_account)
        -- Set 'service_account' with 'a_name'.
      do
        service_account := a_name
      ensure
        service_account_set: service_account = a_name
      end

    set_service_account_name (a_name: like service_account_name)
        -- Set 'service_account_name' with 'a_name'.
      do
        service_account_name := a_name
      ensure
        service_account_name_set: service_account_name = a_name
      end

    set_set_hostname_as_fq_dn (a_name: like set_hostname_as_fq_dn)
        -- Set 'set_hostname_as_fq_dn' with 'a_name'.
      do
        set_hostname_as_fq_dn := a_name
      ensure
        set_hostname_as_fq_dn_set: set_hostname_as_fq_dn = a_name
      end

    set_share_process_namespace (a_name: like share_process_namespace)
        -- Set 'share_process_namespace' with 'a_name'.
      do
        share_process_namespace := a_name
      ensure
        share_process_namespace_set: share_process_namespace = a_name
      end

    set_subdomain (a_name: like subdomain)
        -- Set 'subdomain' with 'a_name'.
      do
        subdomain := a_name
      ensure
        subdomain_set: subdomain = a_name
      end

    set_termination_grace_period_seconds (a_name: like termination_grace_period_seconds)
        -- Set 'termination_grace_period_seconds' with 'a_name'.
      do
        termination_grace_period_seconds := a_name
      ensure
        termination_grace_period_seconds_set: termination_grace_period_seconds = a_name
      end

    set_tolerations (a_name: like tolerations)
        -- Set 'tolerations' with 'a_name'.
      do
        tolerations := a_name
      ensure
        tolerations_set: tolerations = a_name
      end

    set_topology_spread_constraints (a_name: like topology_spread_constraints)
        -- Set 'topology_spread_constraints' with 'a_name'.
      do
        topology_spread_constraints := a_name
      ensure
        topology_spread_constraints_set: topology_spread_constraints = a_name
      end

    set_volumes (a_name: like volumes)
        -- Set 'volumes' with 'a_name'.
      do
        volumes := a_name
      ensure
        volumes_set: volumes = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_POD_SPEC%N")
        if attached active_deadline_seconds as l_active_deadline_seconds then
          Result.append ("%Nactive_deadline_seconds:")
          Result.append (l_active_deadline_seconds.out)
          Result.append ("%N")
        end
        if attached affinity as l_affinity then
          Result.append ("%Naffinity:")
          Result.append (l_affinity.out)
          Result.append ("%N")
        end
        if attached automount_service_account_token as l_automount_service_account_token then
          Result.append ("%Nautomount_service_account_token:")
          Result.append (l_automount_service_account_token.out)
          Result.append ("%N")
        end
        if attached containers as l_containers then
          across l_containers as ic loop
            Result.append ("%N containers:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached dns_config as l_dns_config then
          Result.append ("%Ndns_config:")
          Result.append (l_dns_config.out)
          Result.append ("%N")
        end
        if attached dns_policy as l_dns_policy then
          Result.append ("%Ndns_policy:")
          Result.append (l_dns_policy.out)
          Result.append ("%N")
        end
        if attached enable_service_links as l_enable_service_links then
          Result.append ("%Nenable_service_links:")
          Result.append (l_enable_service_links.out)
          Result.append ("%N")
        end
        if attached ephemeral_containers as l_ephemeral_containers then
          across l_ephemeral_containers as ic loop
            Result.append ("%N ephemeral_containers:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached host_aliases as l_host_aliases then
          across l_host_aliases as ic loop
            Result.append ("%N host_aliases:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached host_ip_c as l_host_ip_c then
          Result.append ("%Nhost_ip_c:")
          Result.append (l_host_ip_c.out)
          Result.append ("%N")
        end
        if attached host_network as l_host_network then
          Result.append ("%Nhost_network:")
          Result.append (l_host_network.out)
          Result.append ("%N")
        end
        if attached host_pi_d as l_host_pi_d then
          Result.append ("%Nhost_pi_d:")
          Result.append (l_host_pi_d.out)
          Result.append ("%N")
        end
        if attached hostname as l_hostname then
          Result.append ("%Nhostname:")
          Result.append (l_hostname.out)
          Result.append ("%N")
        end
        if attached image_pull_secrets as l_image_pull_secrets then
          across l_image_pull_secrets as ic loop
            Result.append ("%N image_pull_secrets:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached init_containers as l_init_containers then
          across l_init_containers as ic loop
            Result.append ("%N init_containers:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached node_name as l_node_name then
          Result.append ("%Nnode_name:")
          Result.append (l_node_name.out)
          Result.append ("%N")
        end
        if attached node_selector as l_node_selector then
          Result.append ("%Nnode_selector:")
          across l_node_selector as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached os as l_os then
          Result.append ("%Nos:")
          Result.append (l_os.out)
          Result.append ("%N")
        end
        if attached overhead as l_overhead then
          Result.append ("%Noverhead:")
          across l_overhead as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached preemption_policy as l_preemption_policy then
          Result.append ("%Npreemption_policy:")
          Result.append (l_preemption_policy.out)
          Result.append ("%N")
        end
        if attached priority as l_priority then
          Result.append ("%Npriority:")
          Result.append (l_priority.out)
          Result.append ("%N")
        end
        if attached priority_class_name as l_priority_class_name then
          Result.append ("%Npriority_class_name:")
          Result.append (l_priority_class_name.out)
          Result.append ("%N")
        end
        if attached readiness_gates as l_readiness_gates then
          across l_readiness_gates as ic loop
            Result.append ("%N readiness_gates:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached restart_policy as l_restart_policy then
          Result.append ("%Nrestart_policy:")
          Result.append (l_restart_policy.out)
          Result.append ("%N")
        end
        if attached runtime_class_name as l_runtime_class_name then
          Result.append ("%Nruntime_class_name:")
          Result.append (l_runtime_class_name.out)
          Result.append ("%N")
        end
        if attached scheduler_name as l_scheduler_name then
          Result.append ("%Nscheduler_name:")
          Result.append (l_scheduler_name.out)
          Result.append ("%N")
        end
        if attached security_context as l_security_context then
          Result.append ("%Nsecurity_context:")
          Result.append (l_security_context.out)
          Result.append ("%N")
        end
        if attached service_account as l_service_account then
          Result.append ("%Nservice_account:")
          Result.append (l_service_account.out)
          Result.append ("%N")
        end
        if attached service_account_name as l_service_account_name then
          Result.append ("%Nservice_account_name:")
          Result.append (l_service_account_name.out)
          Result.append ("%N")
        end
        if attached set_hostname_as_fq_dn as l_set_hostname_as_fq_dn then
          Result.append ("%Nset_hostname_as_fq_dn:")
          Result.append (l_set_hostname_as_fq_dn.out)
          Result.append ("%N")
        end
        if attached share_process_namespace as l_share_process_namespace then
          Result.append ("%Nshare_process_namespace:")
          Result.append (l_share_process_namespace.out)
          Result.append ("%N")
        end
        if attached subdomain as l_subdomain then
          Result.append ("%Nsubdomain:")
          Result.append (l_subdomain.out)
          Result.append ("%N")
        end
        if attached termination_grace_period_seconds as l_termination_grace_period_seconds then
          Result.append ("%Ntermination_grace_period_seconds:")
          Result.append (l_termination_grace_period_seconds.out)
          Result.append ("%N")
        end
        if attached tolerations as l_tolerations then
          across l_tolerations as ic loop
            Result.append ("%N tolerations:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached topology_spread_constraints as l_topology_spread_constraints then
          across l_topology_spread_constraints as ic loop
            Result.append ("%N topology_spread_constraints:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached volumes as l_volumes then
          across l_volumes as ic loop
            Result.append ("%N volumes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

