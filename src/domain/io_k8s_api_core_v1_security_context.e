note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_SECURITY_CONTEXT




feature --Access

 	allow_privilege_escalation: BOOLEAN
    	 -- AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    capabilities: detachable IO_K8S_API_CORE_V1_CAPABILITIES
      
 	privileged: BOOLEAN
    	 -- Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    proc_mount: detachable STRING_32
      -- procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
 	read_only_root_filesystem: BOOLEAN
    	 -- Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
 	run_as_group: INTEGER_64
    	 -- The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
 	run_as_non_root: BOOLEAN
    	 -- Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 	run_as_user: INTEGER_64
    	 -- The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    se_linux_options: detachable IO_K8S_API_CORE_V1_SE_LINUX_OPTIONS
      
    seccomp_profile: detachable IO_K8S_API_CORE_V1_SECCOMP_PROFILE
      
    windows_options: detachable IO_K8S_API_CORE_V1_WINDOWS_SECURITY_CONTEXT_OPTIONS
      

feature -- Change Element

    set_allow_privilege_escalation (a_name: like allow_privilege_escalation)
        -- Set 'allow_privilege_escalation' with 'a_name'.
      do
        allow_privilege_escalation := a_name
      ensure
        allow_privilege_escalation_set: allow_privilege_escalation = a_name
      end

    set_capabilities (a_name: like capabilities)
        -- Set 'capabilities' with 'a_name'.
      do
        capabilities := a_name
      ensure
        capabilities_set: capabilities = a_name
      end

    set_privileged (a_name: like privileged)
        -- Set 'privileged' with 'a_name'.
      do
        privileged := a_name
      ensure
        privileged_set: privileged = a_name
      end

    set_proc_mount (a_name: like proc_mount)
        -- Set 'proc_mount' with 'a_name'.
      do
        proc_mount := a_name
      ensure
        proc_mount_set: proc_mount = a_name
      end

    set_read_only_root_filesystem (a_name: like read_only_root_filesystem)
        -- Set 'read_only_root_filesystem' with 'a_name'.
      do
        read_only_root_filesystem := a_name
      ensure
        read_only_root_filesystem_set: read_only_root_filesystem = a_name
      end

    set_run_as_group (a_name: like run_as_group)
        -- Set 'run_as_group' with 'a_name'.
      do
        run_as_group := a_name
      ensure
        run_as_group_set: run_as_group = a_name
      end

    set_run_as_non_root (a_name: like run_as_non_root)
        -- Set 'run_as_non_root' with 'a_name'.
      do
        run_as_non_root := a_name
      ensure
        run_as_non_root_set: run_as_non_root = a_name
      end

    set_run_as_user (a_name: like run_as_user)
        -- Set 'run_as_user' with 'a_name'.
      do
        run_as_user := a_name
      ensure
        run_as_user_set: run_as_user = a_name
      end

    set_se_linux_options (a_name: like se_linux_options)
        -- Set 'se_linux_options' with 'a_name'.
      do
        se_linux_options := a_name
      ensure
        se_linux_options_set: se_linux_options = a_name
      end

    set_seccomp_profile (a_name: like seccomp_profile)
        -- Set 'seccomp_profile' with 'a_name'.
      do
        seccomp_profile := a_name
      ensure
        seccomp_profile_set: seccomp_profile = a_name
      end

    set_windows_options (a_name: like windows_options)
        -- Set 'windows_options' with 'a_name'.
      do
        windows_options := a_name
      ensure
        windows_options_set: windows_options = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_SECURITY_CONTEXT%N")
        if attached allow_privilege_escalation as l_allow_privilege_escalation then
          Result.append ("%Nallow_privilege_escalation:")
          Result.append (l_allow_privilege_escalation.out)
          Result.append ("%N")
        end
        if attached capabilities as l_capabilities then
          Result.append ("%Ncapabilities:")
          Result.append (l_capabilities.out)
          Result.append ("%N")
        end
        if attached privileged as l_privileged then
          Result.append ("%Nprivileged:")
          Result.append (l_privileged.out)
          Result.append ("%N")
        end
        if attached proc_mount as l_proc_mount then
          Result.append ("%Nproc_mount:")
          Result.append (l_proc_mount.out)
          Result.append ("%N")
        end
        if attached read_only_root_filesystem as l_read_only_root_filesystem then
          Result.append ("%Nread_only_root_filesystem:")
          Result.append (l_read_only_root_filesystem.out)
          Result.append ("%N")
        end
        if attached run_as_group as l_run_as_group then
          Result.append ("%Nrun_as_group:")
          Result.append (l_run_as_group.out)
          Result.append ("%N")
        end
        if attached run_as_non_root as l_run_as_non_root then
          Result.append ("%Nrun_as_non_root:")
          Result.append (l_run_as_non_root.out)
          Result.append ("%N")
        end
        if attached run_as_user as l_run_as_user then
          Result.append ("%Nrun_as_user:")
          Result.append (l_run_as_user.out)
          Result.append ("%N")
        end
        if attached se_linux_options as l_se_linux_options then
          Result.append ("%Nse_linux_options:")
          Result.append (l_se_linux_options.out)
          Result.append ("%N")
        end
        if attached seccomp_profile as l_seccomp_profile then
          Result.append ("%Nseccomp_profile:")
          Result.append (l_seccomp_profile.out)
          Result.append ("%N")
        end
        if attached windows_options as l_windows_options then
          Result.append ("%Nwindows_options:")
          Result.append (l_windows_options.out)
          Result.append ("%N")
        end
      end
end

