note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_APIMACHINERY_PKG_APIS_META_V1_API_VERSIONS




feature --Access

    api_version: detachable STRING_32
      -- APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: detachable STRING_32
      -- Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    server_address_by_client_ci_drs: detachable LIST [IO_K8S_APIMACHINERY_PKG_APIS_META_V1_SERVER_ADDRESS_BY_CLIENT_CIDR]
      -- a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    versions: detachable LIST [STRING_32]
      -- versions are the api versions that are available.

feature -- Change Element

    set_api_version (a_name: like api_version)
        -- Set 'api_version' with 'a_name'.
      do
        api_version := a_name
      ensure
        api_version_set: api_version = a_name
      end

    set_kind (a_name: like kind)
        -- Set 'kind' with 'a_name'.
      do
        kind := a_name
      ensure
        kind_set: kind = a_name
      end

    set_server_address_by_client_ci_drs (a_name: like server_address_by_client_ci_drs)
        -- Set 'server_address_by_client_ci_drs' with 'a_name'.
      do
        server_address_by_client_ci_drs := a_name
      ensure
        server_address_by_client_ci_drs_set: server_address_by_client_ci_drs = a_name
      end

    set_versions (a_name: like versions)
        -- Set 'versions' with 'a_name'.
      do
        versions := a_name
      ensure
        versions_set: versions = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_APIMACHINERY_PKG_APIS_META_V1_API_VERSIONS%N")
        if attached api_version as l_api_version then
          Result.append ("%Napi_version:")
          Result.append (l_api_version.out)
          Result.append ("%N")
        end
        if attached kind as l_kind then
          Result.append ("%Nkind:")
          Result.append (l_kind.out)
          Result.append ("%N")
        end
        if attached server_address_by_client_ci_drs as l_server_address_by_client_ci_drs then
          across l_server_address_by_client_ci_drs as ic loop
            Result.append ("%N server_address_by_client_ci_drs:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached versions as l_versions then
          across l_versions as ic loop
            Result.append ("%N versions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

