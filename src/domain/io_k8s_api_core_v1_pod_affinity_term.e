note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_POD_AFFINITY_TERM




feature --Access

    label_selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      
    namespace_selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      
    namespaces: detachable LIST [STRING_32]
      -- namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"
    topology_key: detachable STRING_32
      -- This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.

feature -- Change Element

    set_label_selector (a_name: like label_selector)
        -- Set 'label_selector' with 'a_name'.
      do
        label_selector := a_name
      ensure
        label_selector_set: label_selector = a_name
      end

    set_namespace_selector (a_name: like namespace_selector)
        -- Set 'namespace_selector' with 'a_name'.
      do
        namespace_selector := a_name
      ensure
        namespace_selector_set: namespace_selector = a_name
      end

    set_namespaces (a_name: like namespaces)
        -- Set 'namespaces' with 'a_name'.
      do
        namespaces := a_name
      ensure
        namespaces_set: namespaces = a_name
      end

    set_topology_key (a_name: like topology_key)
        -- Set 'topology_key' with 'a_name'.
      do
        topology_key := a_name
      ensure
        topology_key_set: topology_key = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_POD_AFFINITY_TERM%N")
        if attached label_selector as l_label_selector then
          Result.append ("%Nlabel_selector:")
          Result.append (l_label_selector.out)
          Result.append ("%N")
        end
        if attached namespace_selector as l_namespace_selector then
          Result.append ("%Nnamespace_selector:")
          Result.append (l_namespace_selector.out)
          Result.append ("%N")
        end
        if attached namespaces as l_namespaces then
          across l_namespaces as ic loop
            Result.append ("%N namespaces:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached topology_key as l_topology_key then
          Result.append ("%Ntopology_key:")
          Result.append (l_topology_key.out)
          Result.append ("%N")
        end
      end
end

