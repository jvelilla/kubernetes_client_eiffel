note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_FLOWCONTROL_V1BETA1_RESOURCE_POLICY_RULE




feature --Access

    api_groups: detachable LIST [STRING_32]
      -- `apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.
 	cluster_scope: BOOLEAN
    	 -- `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
    namespaces: detachable LIST [STRING_32]
      -- `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
    resources: detachable LIST [STRING_32]
      -- `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.
    verbs: detachable LIST [STRING_32]
      -- `verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.

feature -- Change Element

    set_api_groups (a_name: like api_groups)
        -- Set 'api_groups' with 'a_name'.
      do
        api_groups := a_name
      ensure
        api_groups_set: api_groups = a_name
      end

    set_cluster_scope (a_name: like cluster_scope)
        -- Set 'cluster_scope' with 'a_name'.
      do
        cluster_scope := a_name
      ensure
        cluster_scope_set: cluster_scope = a_name
      end

    set_namespaces (a_name: like namespaces)
        -- Set 'namespaces' with 'a_name'.
      do
        namespaces := a_name
      ensure
        namespaces_set: namespaces = a_name
      end

    set_resources (a_name: like resources)
        -- Set 'resources' with 'a_name'.
      do
        resources := a_name
      ensure
        resources_set: resources = a_name
      end

    set_verbs (a_name: like verbs)
        -- Set 'verbs' with 'a_name'.
      do
        verbs := a_name
      ensure
        verbs_set: verbs = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_FLOWCONTROL_V1BETA1_RESOURCE_POLICY_RULE%N")
        if attached api_groups as l_api_groups then
          across l_api_groups as ic loop
            Result.append ("%N api_groups:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached cluster_scope as l_cluster_scope then
          Result.append ("%Ncluster_scope:")
          Result.append (l_cluster_scope.out)
          Result.append ("%N")
        end
        if attached namespaces as l_namespaces then
          across l_namespaces as ic loop
            Result.append ("%N namespaces:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached resources as l_resources then
          across l_resources as ic loop
            Result.append ("%N resources:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached verbs as l_verbs then
          across l_verbs as ic loop
            Result.append ("%N verbs:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

