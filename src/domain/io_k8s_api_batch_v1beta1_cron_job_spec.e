note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_BATCH_V1BETA1_CRON_JOB_SPEC




feature --Access

    concurrency_policy: detachable STRING_32
      -- Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one
 	failed_jobs_history_limit: INTEGER_32
    	 -- The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    job_template: detachable IO_K8S_API_BATCH_V1BETA1_JOB_TEMPLATE_SPEC
      
    schedule: detachable STRING_32
      -- The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
 	starting_deadline_seconds: INTEGER_64
    	 -- Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
 	successful_jobs_history_limit: INTEGER_32
    	 -- The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.
 	suspend: BOOLEAN
    	 -- This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.

feature -- Change Element

    set_concurrency_policy (a_name: like concurrency_policy)
        -- Set 'concurrency_policy' with 'a_name'.
      do
        concurrency_policy := a_name
      ensure
        concurrency_policy_set: concurrency_policy = a_name
      end

    set_failed_jobs_history_limit (a_name: like failed_jobs_history_limit)
        -- Set 'failed_jobs_history_limit' with 'a_name'.
      do
        failed_jobs_history_limit := a_name
      ensure
        failed_jobs_history_limit_set: failed_jobs_history_limit = a_name
      end

    set_job_template (a_name: like job_template)
        -- Set 'job_template' with 'a_name'.
      do
        job_template := a_name
      ensure
        job_template_set: job_template = a_name
      end

    set_schedule (a_name: like schedule)
        -- Set 'schedule' with 'a_name'.
      do
        schedule := a_name
      ensure
        schedule_set: schedule = a_name
      end

    set_starting_deadline_seconds (a_name: like starting_deadline_seconds)
        -- Set 'starting_deadline_seconds' with 'a_name'.
      do
        starting_deadline_seconds := a_name
      ensure
        starting_deadline_seconds_set: starting_deadline_seconds = a_name
      end

    set_successful_jobs_history_limit (a_name: like successful_jobs_history_limit)
        -- Set 'successful_jobs_history_limit' with 'a_name'.
      do
        successful_jobs_history_limit := a_name
      ensure
        successful_jobs_history_limit_set: successful_jobs_history_limit = a_name
      end

    set_suspend (a_name: like suspend)
        -- Set 'suspend' with 'a_name'.
      do
        suspend := a_name
      ensure
        suspend_set: suspend = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_BATCH_V1BETA1_CRON_JOB_SPEC%N")
        if attached concurrency_policy as l_concurrency_policy then
          Result.append ("%Nconcurrency_policy:")
          Result.append (l_concurrency_policy.out)
          Result.append ("%N")
        end
        if attached failed_jobs_history_limit as l_failed_jobs_history_limit then
          Result.append ("%Nfailed_jobs_history_limit:")
          Result.append (l_failed_jobs_history_limit.out)
          Result.append ("%N")
        end
        if attached job_template as l_job_template then
          Result.append ("%Njob_template:")
          Result.append (l_job_template.out)
          Result.append ("%N")
        end
        if attached schedule as l_schedule then
          Result.append ("%Nschedule:")
          Result.append (l_schedule.out)
          Result.append ("%N")
        end
        if attached starting_deadline_seconds as l_starting_deadline_seconds then
          Result.append ("%Nstarting_deadline_seconds:")
          Result.append (l_starting_deadline_seconds.out)
          Result.append ("%N")
        end
        if attached successful_jobs_history_limit as l_successful_jobs_history_limit then
          Result.append ("%Nsuccessful_jobs_history_limit:")
          Result.append (l_successful_jobs_history_limit.out)
          Result.append ("%N")
        end
        if attached suspend as l_suspend then
          Result.append ("%Nsuspend:")
          Result.append (l_suspend.out)
          Result.append ("%N")
        end
      end
end

