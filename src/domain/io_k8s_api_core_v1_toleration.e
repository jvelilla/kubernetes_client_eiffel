note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_TOLERATION




feature --Access

    effect: detachable STRING_32
      -- Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.  Possible enum values:  - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.  - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.  - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
    key: detachable STRING_32
      -- Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator: detachable STRING_32
      -- Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.  Possible enum values:  - `\"Equal\"`  - `\"Exists\"`
 	toleration_seconds: INTEGER_64
    	 -- TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value: detachable STRING_32
      -- Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.

feature -- Change Element

    set_effect (a_name: like effect)
        -- Set 'effect' with 'a_name'.
      do
        effect := a_name
      ensure
        effect_set: effect = a_name
      end

    set_key (a_name: like key)
        -- Set 'key' with 'a_name'.
      do
        key := a_name
      ensure
        key_set: key = a_name
      end

    set_operator (a_name: like operator)
        -- Set 'operator' with 'a_name'.
      do
        operator := a_name
      ensure
        operator_set: operator = a_name
      end

    set_toleration_seconds (a_name: like toleration_seconds)
        -- Set 'toleration_seconds' with 'a_name'.
      do
        toleration_seconds := a_name
      ensure
        toleration_seconds_set: toleration_seconds = a_name
      end

    set_value (a_name: like value)
        -- Set 'value' with 'a_name'.
      do
        value := a_name
      ensure
        value_set: value = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_TOLERATION%N")
        if attached effect as l_effect then
          Result.append ("%Neffect:")
          Result.append (l_effect.out)
          Result.append ("%N")
        end
        if attached key as l_key then
          Result.append ("%Nkey:")
          Result.append (l_key.out)
          Result.append ("%N")
        end
        if attached operator as l_operator then
          Result.append ("%Noperator:")
          Result.append (l_operator.out)
          Result.append ("%N")
        end
        if attached toleration_seconds as l_toleration_seconds then
          Result.append ("%Ntoleration_seconds:")
          Result.append (l_toleration_seconds.out)
          Result.append ("%N")
        end
        if attached value as l_value then
          Result.append ("%Nvalue:")
          Result.append (l_value.out)
          Result.append ("%N")
        end
      end
end

