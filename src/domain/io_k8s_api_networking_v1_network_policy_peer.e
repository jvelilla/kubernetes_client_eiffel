note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_NETWORKING_V1_NETWORK_POLICY_PEER




feature --Access

    ip_block: detachable IO_K8S_API_NETWORKING_V1_IP_BLOCK
      
    namespace_selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      
    pod_selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      

feature -- Change Element

    set_ip_block (a_name: like ip_block)
        -- Set 'ip_block' with 'a_name'.
      do
        ip_block := a_name
      ensure
        ip_block_set: ip_block = a_name
      end

    set_namespace_selector (a_name: like namespace_selector)
        -- Set 'namespace_selector' with 'a_name'.
      do
        namespace_selector := a_name
      ensure
        namespace_selector_set: namespace_selector = a_name
      end

    set_pod_selector (a_name: like pod_selector)
        -- Set 'pod_selector' with 'a_name'.
      do
        pod_selector := a_name
      ensure
        pod_selector_set: pod_selector = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_NETWORKING_V1_NETWORK_POLICY_PEER%N")
        if attached ip_block as l_ip_block then
          Result.append ("%Nip_block:")
          Result.append (l_ip_block.out)
          Result.append ("%N")
        end
        if attached namespace_selector as l_namespace_selector then
          Result.append ("%Nnamespace_selector:")
          Result.append (l_namespace_selector.out)
          Result.append ("%N")
        end
        if attached pod_selector as l_pod_selector then
          Result.append ("%Npod_selector:")
          Result.append (l_pod_selector.out)
          Result.append ("%N")
        end
      end
end

