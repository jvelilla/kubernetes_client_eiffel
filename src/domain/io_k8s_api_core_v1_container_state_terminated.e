note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_CONTAINER_STATE_TERMINATED




feature --Access

    container_id: detachable STRING_32
      -- Container's ID in the format 'docker://<container_id>'
 	exit_code: INTEGER_32
    	 -- Exit status from the last termination of the container
    finished_at: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    message: detachable STRING_32
      -- Message regarding the last termination of the container
    reason: detachable STRING_32
      -- (brief) reason from the last termination of the container
 	signal: INTEGER_32
    	 -- Signal from the last termination of the container
    started_at: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.

feature -- Change Element

    set_container_id (a_name: like container_id)
        -- Set 'container_id' with 'a_name'.
      do
        container_id := a_name
      ensure
        container_id_set: container_id = a_name
      end

    set_exit_code (a_name: like exit_code)
        -- Set 'exit_code' with 'a_name'.
      do
        exit_code := a_name
      ensure
        exit_code_set: exit_code = a_name
      end

    set_finished_at (a_name: like finished_at)
        -- Set 'finished_at' with 'a_name'.
      do
        finished_at := a_name
      ensure
        finished_at_set: finished_at = a_name
      end

    set_message (a_name: like message)
        -- Set 'message' with 'a_name'.
      do
        message := a_name
      ensure
        message_set: message = a_name
      end

    set_reason (a_name: like reason)
        -- Set 'reason' with 'a_name'.
      do
        reason := a_name
      ensure
        reason_set: reason = a_name
      end

    set_signal (a_name: like signal)
        -- Set 'signal' with 'a_name'.
      do
        signal := a_name
      ensure
        signal_set: signal = a_name
      end

    set_started_at (a_name: like started_at)
        -- Set 'started_at' with 'a_name'.
      do
        started_at := a_name
      ensure
        started_at_set: started_at = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_CONTAINER_STATE_TERMINATED%N")
        if attached container_id as l_container_id then
          Result.append ("%Ncontainer_id:")
          Result.append (l_container_id.out)
          Result.append ("%N")
        end
        if attached exit_code as l_exit_code then
          Result.append ("%Nexit_code:")
          Result.append (l_exit_code.out)
          Result.append ("%N")
        end
        if attached finished_at as l_finished_at then
          Result.append ("%Nfinished_at:")
          Result.append (l_finished_at.out)
          Result.append ("%N")
        end
        if attached message as l_message then
          Result.append ("%Nmessage:")
          Result.append (l_message.out)
          Result.append ("%N")
        end
        if attached reason as l_reason then
          Result.append ("%Nreason:")
          Result.append (l_reason.out)
          Result.append ("%N")
        end
        if attached signal as l_signal then
          Result.append ("%Nsignal:")
          Result.append (l_signal.out)
          Result.append ("%N")
        end
        if attached started_at as l_started_at then
          Result.append ("%Nstarted_at:")
          Result.append (l_started_at.out)
          Result.append ("%N")
        end
      end
end

