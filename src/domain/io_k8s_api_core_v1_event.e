note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_EVENT




feature --Access

    action: detachable STRING_32
      -- What action was taken/failed regarding to the Regarding object.
    api_version: detachable STRING_32
      -- APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
 	count: INTEGER_32
    	 -- The number of times this event has occurred.
    event_time: detachable DATE_TIME
      -- MicroTime is version of Time with microsecond level precision.
    first_timestamp: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    involved_object: detachable IO_K8S_API_CORE_V1_OBJECT_REFERENCE
      
    kind: detachable STRING_32
      -- Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    last_timestamp: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    message: detachable STRING_32
      -- A human-readable description of the status of this operation.
    metadata: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_OBJECT_META
      
    reason: detachable STRING_32
      -- This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
    related: detachable IO_K8S_API_CORE_V1_OBJECT_REFERENCE
      
    reporting_component: detachable STRING_32
      -- Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
    reporting_instance: detachable STRING_32
      -- ID of the controller instance, e.g. `kubelet-xyzf`.
    series: detachable IO_K8S_API_CORE_V1_EVENT_SERIES
      
    source: detachable IO_K8S_API_CORE_V1_EVENT_SOURCE
      
    type: detachable STRING_32
      -- Type of this event (Normal, Warning), new types could be added in the future

feature -- Change Element

    set_action (a_name: like action)
        -- Set 'action' with 'a_name'.
      do
        action := a_name
      ensure
        action_set: action = a_name
      end

    set_api_version (a_name: like api_version)
        -- Set 'api_version' with 'a_name'.
      do
        api_version := a_name
      ensure
        api_version_set: api_version = a_name
      end

    set_count (a_name: like count)
        -- Set 'count' with 'a_name'.
      do
        count := a_name
      ensure
        count_set: count = a_name
      end

    set_event_time (a_name: like event_time)
        -- Set 'event_time' with 'a_name'.
      do
        event_time := a_name
      ensure
        event_time_set: event_time = a_name
      end

    set_first_timestamp (a_name: like first_timestamp)
        -- Set 'first_timestamp' with 'a_name'.
      do
        first_timestamp := a_name
      ensure
        first_timestamp_set: first_timestamp = a_name
      end

    set_involved_object (a_name: like involved_object)
        -- Set 'involved_object' with 'a_name'.
      do
        involved_object := a_name
      ensure
        involved_object_set: involved_object = a_name
      end

    set_kind (a_name: like kind)
        -- Set 'kind' with 'a_name'.
      do
        kind := a_name
      ensure
        kind_set: kind = a_name
      end

    set_last_timestamp (a_name: like last_timestamp)
        -- Set 'last_timestamp' with 'a_name'.
      do
        last_timestamp := a_name
      ensure
        last_timestamp_set: last_timestamp = a_name
      end

    set_message (a_name: like message)
        -- Set 'message' with 'a_name'.
      do
        message := a_name
      ensure
        message_set: message = a_name
      end

    set_metadata (a_name: like metadata)
        -- Set 'metadata' with 'a_name'.
      do
        metadata := a_name
      ensure
        metadata_set: metadata = a_name
      end

    set_reason (a_name: like reason)
        -- Set 'reason' with 'a_name'.
      do
        reason := a_name
      ensure
        reason_set: reason = a_name
      end

    set_related (a_name: like related)
        -- Set 'related' with 'a_name'.
      do
        related := a_name
      ensure
        related_set: related = a_name
      end

    set_reporting_component (a_name: like reporting_component)
        -- Set 'reporting_component' with 'a_name'.
      do
        reporting_component := a_name
      ensure
        reporting_component_set: reporting_component = a_name
      end

    set_reporting_instance (a_name: like reporting_instance)
        -- Set 'reporting_instance' with 'a_name'.
      do
        reporting_instance := a_name
      ensure
        reporting_instance_set: reporting_instance = a_name
      end

    set_series (a_name: like series)
        -- Set 'series' with 'a_name'.
      do
        series := a_name
      ensure
        series_set: series = a_name
      end

    set_source (a_name: like source)
        -- Set 'source' with 'a_name'.
      do
        source := a_name
      ensure
        source_set: source = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_EVENT%N")
        if attached action as l_action then
          Result.append ("%Naction:")
          Result.append (l_action.out)
          Result.append ("%N")
        end
        if attached api_version as l_api_version then
          Result.append ("%Napi_version:")
          Result.append (l_api_version.out)
          Result.append ("%N")
        end
        if attached count as l_count then
          Result.append ("%Ncount:")
          Result.append (l_count.out)
          Result.append ("%N")
        end
        if attached event_time as l_event_time then
          Result.append ("%Nevent_time:")
          Result.append (l_event_time.out)
          Result.append ("%N")
        end
        if attached first_timestamp as l_first_timestamp then
          Result.append ("%Nfirst_timestamp:")
          Result.append (l_first_timestamp.out)
          Result.append ("%N")
        end
        if attached involved_object as l_involved_object then
          Result.append ("%Ninvolved_object:")
          Result.append (l_involved_object.out)
          Result.append ("%N")
        end
        if attached kind as l_kind then
          Result.append ("%Nkind:")
          Result.append (l_kind.out)
          Result.append ("%N")
        end
        if attached last_timestamp as l_last_timestamp then
          Result.append ("%Nlast_timestamp:")
          Result.append (l_last_timestamp.out)
          Result.append ("%N")
        end
        if attached message as l_message then
          Result.append ("%Nmessage:")
          Result.append (l_message.out)
          Result.append ("%N")
        end
        if attached metadata as l_metadata then
          Result.append ("%Nmetadata:")
          Result.append (l_metadata.out)
          Result.append ("%N")
        end
        if attached reason as l_reason then
          Result.append ("%Nreason:")
          Result.append (l_reason.out)
          Result.append ("%N")
        end
        if attached related as l_related then
          Result.append ("%Nrelated:")
          Result.append (l_related.out)
          Result.append ("%N")
        end
        if attached reporting_component as l_reporting_component then
          Result.append ("%Nreporting_component:")
          Result.append (l_reporting_component.out)
          Result.append ("%N")
        end
        if attached reporting_instance as l_reporting_instance then
          Result.append ("%Nreporting_instance:")
          Result.append (l_reporting_instance.out)
          Result.append ("%N")
        end
        if attached series as l_series then
          Result.append ("%Nseries:")
          Result.append (l_series.out)
          Result.append ("%N")
        end
        if attached source as l_source then
          Result.append ("%Nsource:")
          Result.append (l_source.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
      end
end

