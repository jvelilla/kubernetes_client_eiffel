note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_NETWORKING_V1_NETWORK_POLICY_SPEC




feature --Access

    egress: detachable LIST [IO_K8S_API_NETWORKING_V1_NETWORK_POLICY_EGRESS_RULE]
      -- List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
    ingress: detachable LIST [IO_K8S_API_NETWORKING_V1_NETWORK_POLICY_INGRESS_RULE]
      -- List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
    pod_selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      
    policy_types: detachable LIST [STRING_32]
      -- List of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8

feature -- Change Element

    set_egress (a_name: like egress)
        -- Set 'egress' with 'a_name'.
      do
        egress := a_name
      ensure
        egress_set: egress = a_name
      end

    set_ingress (a_name: like ingress)
        -- Set 'ingress' with 'a_name'.
      do
        ingress := a_name
      ensure
        ingress_set: ingress = a_name
      end

    set_pod_selector (a_name: like pod_selector)
        -- Set 'pod_selector' with 'a_name'.
      do
        pod_selector := a_name
      ensure
        pod_selector_set: pod_selector = a_name
      end

    set_policy_types (a_name: like policy_types)
        -- Set 'policy_types' with 'a_name'.
      do
        policy_types := a_name
      ensure
        policy_types_set: policy_types = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_NETWORKING_V1_NETWORK_POLICY_SPEC%N")
        if attached egress as l_egress then
          across l_egress as ic loop
            Result.append ("%N egress:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ingress as l_ingress then
          across l_ingress as ic loop
            Result.append ("%N ingress:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached pod_selector as l_pod_selector then
          Result.append ("%Npod_selector:")
          Result.append (l_pod_selector.out)
          Result.append ("%N")
        end
        if attached policy_types as l_policy_types then
          across l_policy_types as ic loop
            Result.append ("%N policy_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

