note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_POD_SECURITY_CONTEXT




feature --Access

 	fs_group: INTEGER_64
    	 -- A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    fs_group_change_policy: detachable STRING_32
      -- fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.
 	run_as_group: INTEGER_64
    	 -- The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 	run_as_non_root: BOOLEAN
    	 -- Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 	run_as_user: INTEGER_64
    	 -- The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
    se_linux_options: detachable IO_K8S_API_CORE_V1_SE_LINUX_OPTIONS
      
    seccomp_profile: detachable IO_K8S_API_CORE_V1_SECCOMP_PROFILE
      
 	supplemental_groups: detachable LIST [INTEGER_64]
    	 -- A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
    sysctls: detachable LIST [IO_K8S_API_CORE_V1_SYSCTL]
      -- Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
    windows_options: detachable IO_K8S_API_CORE_V1_WINDOWS_SECURITY_CONTEXT_OPTIONS
      

feature -- Change Element

    set_fs_group (a_name: like fs_group)
        -- Set 'fs_group' with 'a_name'.
      do
        fs_group := a_name
      ensure
        fs_group_set: fs_group = a_name
      end

    set_fs_group_change_policy (a_name: like fs_group_change_policy)
        -- Set 'fs_group_change_policy' with 'a_name'.
      do
        fs_group_change_policy := a_name
      ensure
        fs_group_change_policy_set: fs_group_change_policy = a_name
      end

    set_run_as_group (a_name: like run_as_group)
        -- Set 'run_as_group' with 'a_name'.
      do
        run_as_group := a_name
      ensure
        run_as_group_set: run_as_group = a_name
      end

    set_run_as_non_root (a_name: like run_as_non_root)
        -- Set 'run_as_non_root' with 'a_name'.
      do
        run_as_non_root := a_name
      ensure
        run_as_non_root_set: run_as_non_root = a_name
      end

    set_run_as_user (a_name: like run_as_user)
        -- Set 'run_as_user' with 'a_name'.
      do
        run_as_user := a_name
      ensure
        run_as_user_set: run_as_user = a_name
      end

    set_se_linux_options (a_name: like se_linux_options)
        -- Set 'se_linux_options' with 'a_name'.
      do
        se_linux_options := a_name
      ensure
        se_linux_options_set: se_linux_options = a_name
      end

    set_seccomp_profile (a_name: like seccomp_profile)
        -- Set 'seccomp_profile' with 'a_name'.
      do
        seccomp_profile := a_name
      ensure
        seccomp_profile_set: seccomp_profile = a_name
      end

    set_supplemental_groups (a_name: like supplemental_groups)
        -- Set 'supplemental_groups' with 'a_name'.
      do
        supplemental_groups := a_name
      ensure
        supplemental_groups_set: supplemental_groups = a_name
      end

    set_sysctls (a_name: like sysctls)
        -- Set 'sysctls' with 'a_name'.
      do
        sysctls := a_name
      ensure
        sysctls_set: sysctls = a_name
      end

    set_windows_options (a_name: like windows_options)
        -- Set 'windows_options' with 'a_name'.
      do
        windows_options := a_name
      ensure
        windows_options_set: windows_options = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_POD_SECURITY_CONTEXT%N")
        if attached fs_group as l_fs_group then
          Result.append ("%Nfs_group:")
          Result.append (l_fs_group.out)
          Result.append ("%N")
        end
        if attached fs_group_change_policy as l_fs_group_change_policy then
          Result.append ("%Nfs_group_change_policy:")
          Result.append (l_fs_group_change_policy.out)
          Result.append ("%N")
        end
        if attached run_as_group as l_run_as_group then
          Result.append ("%Nrun_as_group:")
          Result.append (l_run_as_group.out)
          Result.append ("%N")
        end
        if attached run_as_non_root as l_run_as_non_root then
          Result.append ("%Nrun_as_non_root:")
          Result.append (l_run_as_non_root.out)
          Result.append ("%N")
        end
        if attached run_as_user as l_run_as_user then
          Result.append ("%Nrun_as_user:")
          Result.append (l_run_as_user.out)
          Result.append ("%N")
        end
        if attached se_linux_options as l_se_linux_options then
          Result.append ("%Nse_linux_options:")
          Result.append (l_se_linux_options.out)
          Result.append ("%N")
        end
        if attached seccomp_profile as l_seccomp_profile then
          Result.append ("%Nseccomp_profile:")
          Result.append (l_seccomp_profile.out)
          Result.append ("%N")
        end
        if attached supplemental_groups as l_supplemental_groups then
          across l_supplemental_groups as ic loop
            Result.append ("%N supplemental_groups:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached sysctls as l_sysctls then
          across l_sysctls as ic loop
            Result.append ("%N sysctls:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached windows_options as l_windows_options then
          Result.append ("%Nwindows_options:")
          Result.append (l_windows_options.out)
          Result.append ("%N")
        end
      end
end

