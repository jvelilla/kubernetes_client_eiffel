note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_RESOURCE_QUOTA_STATUS




feature --Access

    hard: detachable STRING_TABLE [STRING_32]
      -- Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    used: detachable STRING_TABLE [STRING_32]
      -- Used is the current observed total usage of the resource in the namespace.

feature -- Change Element

    set_hard (a_name: like hard)
        -- Set 'hard' with 'a_name'.
      do
        hard := a_name
      ensure
        hard_set: hard = a_name
      end

    set_used (a_name: like used)
        -- Set 'used' with 'a_name'.
      do
        used := a_name
      ensure
        used_set: used = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_RESOURCE_QUOTA_STATUS%N")
        if attached hard as l_hard then
          Result.append ("%Nhard:")
          across l_hard as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached used as l_used then
          Result.append ("%Nused:")
          across l_used as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

