note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_POLICY_V1BETA1_POD_DISRUPTION_BUDGET_STATUS




feature --Access

    conditions: detachable LIST [IO_K8S_APIMACHINERY_PKG_APIS_META_V1_CONDITION]
      -- Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute               the number of allowed disruptions. Therefore no disruptions are               allowed and the status of the condition will be False. - InsufficientPods: The number of pods are either at or below the number                     required by the PodDisruptionBudget. No disruptions are                     allowed and the status of the condition will be False. - SufficientPods: There are more pods than required by the PodDisruptionBudget.                   The condition will be True, and the number of allowed                   disruptions are provided by the disruptionsAllowed property.
 	current_healthy: INTEGER_32
    	 -- current number of healthy pods
 	desired_healthy: INTEGER_32
    	 -- minimum desired number of healthy pods
    disrupted_pods: detachable STRING_TABLE [DATE_TIME]
      -- DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
 	disruptions_allowed: INTEGER_32
    	 -- Number of pod disruptions that are currently allowed.
 	expected_pods: INTEGER_32
    	 -- total number of pods counted by this disruption budget
 	observed_generation: INTEGER_64
    	 -- Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.

feature -- Change Element

    set_conditions (a_name: like conditions)
        -- Set 'conditions' with 'a_name'.
      do
        conditions := a_name
      ensure
        conditions_set: conditions = a_name
      end

    set_current_healthy (a_name: like current_healthy)
        -- Set 'current_healthy' with 'a_name'.
      do
        current_healthy := a_name
      ensure
        current_healthy_set: current_healthy = a_name
      end

    set_desired_healthy (a_name: like desired_healthy)
        -- Set 'desired_healthy' with 'a_name'.
      do
        desired_healthy := a_name
      ensure
        desired_healthy_set: desired_healthy = a_name
      end

    set_disrupted_pods (a_name: like disrupted_pods)
        -- Set 'disrupted_pods' with 'a_name'.
      do
        disrupted_pods := a_name
      ensure
        disrupted_pods_set: disrupted_pods = a_name
      end

    set_disruptions_allowed (a_name: like disruptions_allowed)
        -- Set 'disruptions_allowed' with 'a_name'.
      do
        disruptions_allowed := a_name
      ensure
        disruptions_allowed_set: disruptions_allowed = a_name
      end

    set_expected_pods (a_name: like expected_pods)
        -- Set 'expected_pods' with 'a_name'.
      do
        expected_pods := a_name
      ensure
        expected_pods_set: expected_pods = a_name
      end

    set_observed_generation (a_name: like observed_generation)
        -- Set 'observed_generation' with 'a_name'.
      do
        observed_generation := a_name
      ensure
        observed_generation_set: observed_generation = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_POLICY_V1BETA1_POD_DISRUPTION_BUDGET_STATUS%N")
        if attached conditions as l_conditions then
          across l_conditions as ic loop
            Result.append ("%N conditions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached current_healthy as l_current_healthy then
          Result.append ("%Ncurrent_healthy:")
          Result.append (l_current_healthy.out)
          Result.append ("%N")
        end
        if attached desired_healthy as l_desired_healthy then
          Result.append ("%Ndesired_healthy:")
          Result.append (l_desired_healthy.out)
          Result.append ("%N")
        end
        if attached disrupted_pods as l_disrupted_pods then
          Result.append ("%Ndisrupted_pods:")
          across l_disrupted_pods as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached disruptions_allowed as l_disruptions_allowed then
          Result.append ("%Ndisruptions_allowed:")
          Result.append (l_disruptions_allowed.out)
          Result.append ("%N")
        end
        if attached expected_pods as l_expected_pods then
          Result.append ("%Nexpected_pods:")
          Result.append (l_expected_pods.out)
          Result.append ("%N")
        end
        if attached observed_generation as l_observed_generation then
          Result.append ("%Nobserved_generation:")
          Result.append (l_observed_generation.out)
          Result.append ("%N")
        end
      end
end

