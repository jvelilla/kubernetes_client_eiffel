note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_KEY_TO_PATH




feature --Access

    key: detachable STRING_32
      -- The key to project.
 	mode: INTEGER_32
    	 -- Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path: detachable STRING_32
      -- The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.

feature -- Change Element

    set_key (a_name: like key)
        -- Set 'key' with 'a_name'.
      do
        key := a_name
      ensure
        key_set: key = a_name
      end

    set_mode (a_name: like mode)
        -- Set 'mode' with 'a_name'.
      do
        mode := a_name
      ensure
        mode_set: mode = a_name
      end

    set_path (a_name: like path)
        -- Set 'path' with 'a_name'.
      do
        path := a_name
      ensure
        path_set: path = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_KEY_TO_PATH%N")
        if attached key as l_key then
          Result.append ("%Nkey:")
          Result.append (l_key.out)
          Result.append ("%N")
        end
        if attached mode as l_mode then
          Result.append ("%Nmode:")
          Result.append (l_mode.out)
          Result.append ("%N")
        end
        if attached path as l_path then
          Result.append ("%Npath:")
          Result.append (l_path.out)
          Result.append ("%N")
        end
      end
end

