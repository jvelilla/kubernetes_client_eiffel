note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_FLOWCONTROL_V1BETA2_FLOW_SCHEMA_SPEC




feature --Access

    distinguisher_method: detachable IO_K8S_API_FLOWCONTROL_V1BETA2_FLOW_DISTINGUISHER_METHOD
      
 	matching_precedence: INTEGER_32
    	 -- `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
    priority_level_configuration: detachable IO_K8S_API_FLOWCONTROL_V1BETA2_PRIORITY_LEVEL_CONFIGURATION_REFERENCE
      
    rules: detachable LIST [IO_K8S_API_FLOWCONTROL_V1BETA2_POLICY_RULES_WITH_SUBJECTS]
      -- `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.

feature -- Change Element

    set_distinguisher_method (a_name: like distinguisher_method)
        -- Set 'distinguisher_method' with 'a_name'.
      do
        distinguisher_method := a_name
      ensure
        distinguisher_method_set: distinguisher_method = a_name
      end

    set_matching_precedence (a_name: like matching_precedence)
        -- Set 'matching_precedence' with 'a_name'.
      do
        matching_precedence := a_name
      ensure
        matching_precedence_set: matching_precedence = a_name
      end

    set_priority_level_configuration (a_name: like priority_level_configuration)
        -- Set 'priority_level_configuration' with 'a_name'.
      do
        priority_level_configuration := a_name
      ensure
        priority_level_configuration_set: priority_level_configuration = a_name
      end

    set_rules (a_name: like rules)
        -- Set 'rules' with 'a_name'.
      do
        rules := a_name
      ensure
        rules_set: rules = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_FLOWCONTROL_V1BETA2_FLOW_SCHEMA_SPEC%N")
        if attached distinguisher_method as l_distinguisher_method then
          Result.append ("%Ndistinguisher_method:")
          Result.append (l_distinguisher_method.out)
          Result.append ("%N")
        end
        if attached matching_precedence as l_matching_precedence then
          Result.append ("%Nmatching_precedence:")
          Result.append (l_matching_precedence.out)
          Result.append ("%N")
        end
        if attached priority_level_configuration as l_priority_level_configuration then
          Result.append ("%Npriority_level_configuration:")
          Result.append (l_priority_level_configuration.out)
          Result.append ("%N")
        end
        if attached rules as l_rules then
          across l_rules as ic loop
            Result.append ("%N rules:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

