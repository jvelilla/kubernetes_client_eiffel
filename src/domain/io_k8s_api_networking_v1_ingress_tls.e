note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_NETWORKING_V1_INGRESS_TLS




feature --Access

    hosts: detachable LIST [STRING_32]
      -- Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    secret_name: detachable STRING_32
      -- SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.

feature -- Change Element

    set_hosts (a_name: like hosts)
        -- Set 'hosts' with 'a_name'.
      do
        hosts := a_name
      ensure
        hosts_set: hosts = a_name
      end

    set_secret_name (a_name: like secret_name)
        -- Set 'secret_name' with 'a_name'.
      do
        secret_name := a_name
      ensure
        secret_name_set: secret_name = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_NETWORKING_V1_INGRESS_TLS%N")
        if attached hosts as l_hosts then
          across l_hosts as ic loop
            Result.append ("%N hosts:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached secret_name as l_secret_name then
          Result.append ("%Nsecret_name:")
          Result.append (l_secret_name.out)
          Result.append ("%N")
        end
      end
end

