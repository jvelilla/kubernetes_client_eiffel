note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_SERVICE_SPEC




feature --Access

 	allocate_load_balancer_node_ports: BOOLEAN
    	 -- allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
    cluster_ip: detachable STRING_32
      -- clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    cluster_ips: detachable LIST [STRING_32]
      -- ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    external_ips: detachable LIST [STRING_32]
      -- externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    external_name: detachable STRING_32
      -- externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".
    external_traffic_policy: detachable STRING_32
      -- externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.  Possible enum values:  - `\"Cluster\"` specifies node-global (legacy) behavior.  - `\"Local\"` specifies node-local endpoints behavior.
 	health_check_node_port: INTEGER_32
    	 -- healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
    internal_traffic_policy: detachable STRING_32
      -- InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. \"Cluster\" routes internal traffic to a Service to all endpoints. \"Local\" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is \"Cluster\".
    ip_families: detachable LIST [STRING_32]
      -- IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
    ip_family_policy: detachable STRING_32
      -- IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
    load_balancer_class: detachable STRING_32
      -- loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
    load_balancer_ip: detachable STRING_32
      -- Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
    load_balancer_source_ranges: detachable LIST [STRING_32]
      -- If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
    ports: detachable LIST [IO_K8S_API_CORE_V1_SERVICE_PORT]
      -- The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
 	publish_not_ready_addresses: BOOLEAN
    	 -- publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
    selector: detachable STRING_TABLE [STRING_32]
      -- Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    session_affinity: detachable STRING_32
      -- Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies  Possible enum values:  - `\"ClientIP\"` is the Client IP based.  - `\"None\"` - no session affinity.
    session_affinity_config: detachable IO_K8S_API_CORE_V1_SESSION_AFFINITY_CONFIG
      
    type: detachable STRING_32
      -- type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types  Possible enum values:  - `\"ClusterIP\"` means a service will only be accessible inside the cluster, via the cluster IP.  - `\"ExternalName\"` means a service consists of only a reference to an external name that kubedns or equivalent will return as a CNAME record, with no exposing or proxying of any pods involved.  - `\"LoadBalancer\"` means a service will be exposed via an external load balancer (if the cloud provider supports it), in addition to 'NodePort' type.  - `\"NodePort\"` means a service will be exposed on one port of every node, in addition to 'ClusterIP' type.

feature -- Change Element

    set_allocate_load_balancer_node_ports (a_name: like allocate_load_balancer_node_ports)
        -- Set 'allocate_load_balancer_node_ports' with 'a_name'.
      do
        allocate_load_balancer_node_ports := a_name
      ensure
        allocate_load_balancer_node_ports_set: allocate_load_balancer_node_ports = a_name
      end

    set_cluster_ip (a_name: like cluster_ip)
        -- Set 'cluster_ip' with 'a_name'.
      do
        cluster_ip := a_name
      ensure
        cluster_ip_set: cluster_ip = a_name
      end

    set_cluster_ips (a_name: like cluster_ips)
        -- Set 'cluster_ips' with 'a_name'.
      do
        cluster_ips := a_name
      ensure
        cluster_ips_set: cluster_ips = a_name
      end

    set_external_ips (a_name: like external_ips)
        -- Set 'external_ips' with 'a_name'.
      do
        external_ips := a_name
      ensure
        external_ips_set: external_ips = a_name
      end

    set_external_name (a_name: like external_name)
        -- Set 'external_name' with 'a_name'.
      do
        external_name := a_name
      ensure
        external_name_set: external_name = a_name
      end

    set_external_traffic_policy (a_name: like external_traffic_policy)
        -- Set 'external_traffic_policy' with 'a_name'.
      do
        external_traffic_policy := a_name
      ensure
        external_traffic_policy_set: external_traffic_policy = a_name
      end

    set_health_check_node_port (a_name: like health_check_node_port)
        -- Set 'health_check_node_port' with 'a_name'.
      do
        health_check_node_port := a_name
      ensure
        health_check_node_port_set: health_check_node_port = a_name
      end

    set_internal_traffic_policy (a_name: like internal_traffic_policy)
        -- Set 'internal_traffic_policy' with 'a_name'.
      do
        internal_traffic_policy := a_name
      ensure
        internal_traffic_policy_set: internal_traffic_policy = a_name
      end

    set_ip_families (a_name: like ip_families)
        -- Set 'ip_families' with 'a_name'.
      do
        ip_families := a_name
      ensure
        ip_families_set: ip_families = a_name
      end

    set_ip_family_policy (a_name: like ip_family_policy)
        -- Set 'ip_family_policy' with 'a_name'.
      do
        ip_family_policy := a_name
      ensure
        ip_family_policy_set: ip_family_policy = a_name
      end

    set_load_balancer_class (a_name: like load_balancer_class)
        -- Set 'load_balancer_class' with 'a_name'.
      do
        load_balancer_class := a_name
      ensure
        load_balancer_class_set: load_balancer_class = a_name
      end

    set_load_balancer_ip (a_name: like load_balancer_ip)
        -- Set 'load_balancer_ip' with 'a_name'.
      do
        load_balancer_ip := a_name
      ensure
        load_balancer_ip_set: load_balancer_ip = a_name
      end

    set_load_balancer_source_ranges (a_name: like load_balancer_source_ranges)
        -- Set 'load_balancer_source_ranges' with 'a_name'.
      do
        load_balancer_source_ranges := a_name
      ensure
        load_balancer_source_ranges_set: load_balancer_source_ranges = a_name
      end

    set_ports (a_name: like ports)
        -- Set 'ports' with 'a_name'.
      do
        ports := a_name
      ensure
        ports_set: ports = a_name
      end

    set_publish_not_ready_addresses (a_name: like publish_not_ready_addresses)
        -- Set 'publish_not_ready_addresses' with 'a_name'.
      do
        publish_not_ready_addresses := a_name
      ensure
        publish_not_ready_addresses_set: publish_not_ready_addresses = a_name
      end

    set_selector (a_name: like selector)
        -- Set 'selector' with 'a_name'.
      do
        selector := a_name
      ensure
        selector_set: selector = a_name
      end

    set_session_affinity (a_name: like session_affinity)
        -- Set 'session_affinity' with 'a_name'.
      do
        session_affinity := a_name
      ensure
        session_affinity_set: session_affinity = a_name
      end

    set_session_affinity_config (a_name: like session_affinity_config)
        -- Set 'session_affinity_config' with 'a_name'.
      do
        session_affinity_config := a_name
      ensure
        session_affinity_config_set: session_affinity_config = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_SERVICE_SPEC%N")
        if attached allocate_load_balancer_node_ports as l_allocate_load_balancer_node_ports then
          Result.append ("%Nallocate_load_balancer_node_ports:")
          Result.append (l_allocate_load_balancer_node_ports.out)
          Result.append ("%N")
        end
        if attached cluster_ip as l_cluster_ip then
          Result.append ("%Ncluster_ip:")
          Result.append (l_cluster_ip.out)
          Result.append ("%N")
        end
        if attached cluster_ips as l_cluster_ips then
          across l_cluster_ips as ic loop
            Result.append ("%N cluster_ips:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached external_ips as l_external_ips then
          across l_external_ips as ic loop
            Result.append ("%N external_ips:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached external_name as l_external_name then
          Result.append ("%Nexternal_name:")
          Result.append (l_external_name.out)
          Result.append ("%N")
        end
        if attached external_traffic_policy as l_external_traffic_policy then
          Result.append ("%Nexternal_traffic_policy:")
          Result.append (l_external_traffic_policy.out)
          Result.append ("%N")
        end
        if attached health_check_node_port as l_health_check_node_port then
          Result.append ("%Nhealth_check_node_port:")
          Result.append (l_health_check_node_port.out)
          Result.append ("%N")
        end
        if attached internal_traffic_policy as l_internal_traffic_policy then
          Result.append ("%Ninternal_traffic_policy:")
          Result.append (l_internal_traffic_policy.out)
          Result.append ("%N")
        end
        if attached ip_families as l_ip_families then
          across l_ip_families as ic loop
            Result.append ("%N ip_families:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ip_family_policy as l_ip_family_policy then
          Result.append ("%Nip_family_policy:")
          Result.append (l_ip_family_policy.out)
          Result.append ("%N")
        end
        if attached load_balancer_class as l_load_balancer_class then
          Result.append ("%Nload_balancer_class:")
          Result.append (l_load_balancer_class.out)
          Result.append ("%N")
        end
        if attached load_balancer_ip as l_load_balancer_ip then
          Result.append ("%Nload_balancer_ip:")
          Result.append (l_load_balancer_ip.out)
          Result.append ("%N")
        end
        if attached load_balancer_source_ranges as l_load_balancer_source_ranges then
          across l_load_balancer_source_ranges as ic loop
            Result.append ("%N load_balancer_source_ranges:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ports as l_ports then
          across l_ports as ic loop
            Result.append ("%N ports:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached publish_not_ready_addresses as l_publish_not_ready_addresses then
          Result.append ("%Npublish_not_ready_addresses:")
          Result.append (l_publish_not_ready_addresses.out)
          Result.append ("%N")
        end
        if attached selector as l_selector then
          Result.append ("%Nselector:")
          across l_selector as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached session_affinity as l_session_affinity then
          Result.append ("%Nsession_affinity:")
          Result.append (l_session_affinity.out)
          Result.append ("%N")
        end
        if attached session_affinity_config as l_session_affinity_config then
          Result.append ("%Nsession_affinity_config:")
          Result.append (l_session_affinity_config.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
      end
end

