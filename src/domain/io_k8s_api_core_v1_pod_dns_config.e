note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_POD_DNS_CONFIG




feature --Access

    nameservers: detachable LIST [STRING_32]
      -- A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
    options: detachable LIST [IO_K8S_API_CORE_V1_POD_DNS_CONFIG_OPTION]
      -- A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
    searches: detachable LIST [STRING_32]
      -- A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.

feature -- Change Element

    set_nameservers (a_name: like nameservers)
        -- Set 'nameservers' with 'a_name'.
      do
        nameservers := a_name
      ensure
        nameservers_set: nameservers = a_name
      end

    set_options (a_name: like options)
        -- Set 'options' with 'a_name'.
      do
        options := a_name
      ensure
        options_set: options = a_name
      end

    set_searches (a_name: like searches)
        -- Set 'searches' with 'a_name'.
      do
        searches := a_name
      ensure
        searches_set: searches = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_POD_DNS_CONFIG%N")
        if attached nameservers as l_nameservers then
          across l_nameservers as ic loop
            Result.append ("%N nameservers:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached options as l_options then
          across l_options as ic loop
            Result.append ("%N options:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached searches as l_searches then
          across l_searches as ic loop
            Result.append ("%N searches:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

