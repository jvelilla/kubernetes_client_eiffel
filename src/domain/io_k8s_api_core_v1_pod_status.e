note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_POD_STATUS




feature --Access

    conditions: detachable LIST [IO_K8S_API_CORE_V1_POD_CONDITION]
      -- Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    container_statuses: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER_STATUS]
      -- The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    ephemeral_container_statuses: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER_STATUS]
      -- Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
    host_ip: detachable STRING_32
      -- IP address of the host to which the pod is assigned. Empty if not yet scheduled.
    init_container_statuses: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER_STATUS]
      -- The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    message: detachable STRING_32
      -- A human readable message indicating details about why the pod is in this condition.
    nominated_node_name: detachable STRING_32
      -- nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
    phase: detachable STRING_32
      -- The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase  Possible enum values:  - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).  - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.  - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.  - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.  - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)
    pod_ip: detachable STRING_32
      -- IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
    pod_ips: detachable LIST [IO_K8S_API_CORE_V1_POD_IP]
      -- podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
    qos_class: detachable STRING_32
      -- The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md  Possible enum values:  - `\"BestEffort\"` is the BestEffort qos class.  - `\"Burstable\"` is the Burstable qos class.  - `\"Guaranteed\"` is the Guaranteed qos class.
    reason: detachable STRING_32
      -- A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
    start_time: detachable DATE_TIME
      -- Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.

feature -- Change Element

    set_conditions (a_name: like conditions)
        -- Set 'conditions' with 'a_name'.
      do
        conditions := a_name
      ensure
        conditions_set: conditions = a_name
      end

    set_container_statuses (a_name: like container_statuses)
        -- Set 'container_statuses' with 'a_name'.
      do
        container_statuses := a_name
      ensure
        container_statuses_set: container_statuses = a_name
      end

    set_ephemeral_container_statuses (a_name: like ephemeral_container_statuses)
        -- Set 'ephemeral_container_statuses' with 'a_name'.
      do
        ephemeral_container_statuses := a_name
      ensure
        ephemeral_container_statuses_set: ephemeral_container_statuses = a_name
      end

    set_host_ip (a_name: like host_ip)
        -- Set 'host_ip' with 'a_name'.
      do
        host_ip := a_name
      ensure
        host_ip_set: host_ip = a_name
      end

    set_init_container_statuses (a_name: like init_container_statuses)
        -- Set 'init_container_statuses' with 'a_name'.
      do
        init_container_statuses := a_name
      ensure
        init_container_statuses_set: init_container_statuses = a_name
      end

    set_message (a_name: like message)
        -- Set 'message' with 'a_name'.
      do
        message := a_name
      ensure
        message_set: message = a_name
      end

    set_nominated_node_name (a_name: like nominated_node_name)
        -- Set 'nominated_node_name' with 'a_name'.
      do
        nominated_node_name := a_name
      ensure
        nominated_node_name_set: nominated_node_name = a_name
      end

    set_phase (a_name: like phase)
        -- Set 'phase' with 'a_name'.
      do
        phase := a_name
      ensure
        phase_set: phase = a_name
      end

    set_pod_ip (a_name: like pod_ip)
        -- Set 'pod_ip' with 'a_name'.
      do
        pod_ip := a_name
      ensure
        pod_ip_set: pod_ip = a_name
      end

    set_pod_ips (a_name: like pod_ips)
        -- Set 'pod_ips' with 'a_name'.
      do
        pod_ips := a_name
      ensure
        pod_ips_set: pod_ips = a_name
      end

    set_qos_class (a_name: like qos_class)
        -- Set 'qos_class' with 'a_name'.
      do
        qos_class := a_name
      ensure
        qos_class_set: qos_class = a_name
      end

    set_reason (a_name: like reason)
        -- Set 'reason' with 'a_name'.
      do
        reason := a_name
      ensure
        reason_set: reason = a_name
      end

    set_start_time (a_name: like start_time)
        -- Set 'start_time' with 'a_name'.
      do
        start_time := a_name
      ensure
        start_time_set: start_time = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_POD_STATUS%N")
        if attached conditions as l_conditions then
          across l_conditions as ic loop
            Result.append ("%N conditions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached container_statuses as l_container_statuses then
          across l_container_statuses as ic loop
            Result.append ("%N container_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ephemeral_container_statuses as l_ephemeral_container_statuses then
          across l_ephemeral_container_statuses as ic loop
            Result.append ("%N ephemeral_container_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached host_ip as l_host_ip then
          Result.append ("%Nhost_ip:")
          Result.append (l_host_ip.out)
          Result.append ("%N")
        end
        if attached init_container_statuses as l_init_container_statuses then
          across l_init_container_statuses as ic loop
            Result.append ("%N init_container_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached message as l_message then
          Result.append ("%Nmessage:")
          Result.append (l_message.out)
          Result.append ("%N")
        end
        if attached nominated_node_name as l_nominated_node_name then
          Result.append ("%Nnominated_node_name:")
          Result.append (l_nominated_node_name.out)
          Result.append ("%N")
        end
        if attached phase as l_phase then
          Result.append ("%Nphase:")
          Result.append (l_phase.out)
          Result.append ("%N")
        end
        if attached pod_ip as l_pod_ip then
          Result.append ("%Npod_ip:")
          Result.append (l_pod_ip.out)
          Result.append ("%N")
        end
        if attached pod_ips as l_pod_ips then
          across l_pod_ips as ic loop
            Result.append ("%N pod_ips:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached qos_class as l_qos_class then
          Result.append ("%Nqos_class:")
          Result.append (l_qos_class.out)
          Result.append ("%N")
        end
        if attached reason as l_reason then
          Result.append ("%Nreason:")
          Result.append (l_reason.out)
          Result.append ("%N")
        end
        if attached start_time as l_start_time then
          Result.append ("%Nstart_time:")
          Result.append (l_start_time.out)
          Result.append ("%N")
        end
      end
end

