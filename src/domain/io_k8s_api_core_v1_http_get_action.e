note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_HTTP_GET_ACTION




feature --Access

    host: detachable STRING_32
      -- Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
    http_headers: detachable LIST [IO_K8S_API_CORE_V1_HTTP_HEADER]
      -- Custom headers to set in the request. HTTP allows repeated headers.
    path: detachable STRING_32
      -- Path to access on the HTTP server.
    port: detachable STRING_32
      -- IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
    scheme: detachable STRING_32
      -- Scheme to use for connecting to the host. Defaults to HTTP.  Possible enum values:  - `\"HTTP\"` means that the scheme used will be http://  - `\"HTTPS\"` means that the scheme used will be https://

feature -- Change Element

    set_host (a_name: like host)
        -- Set 'host' with 'a_name'.
      do
        host := a_name
      ensure
        host_set: host = a_name
      end

    set_http_headers (a_name: like http_headers)
        -- Set 'http_headers' with 'a_name'.
      do
        http_headers := a_name
      ensure
        http_headers_set: http_headers = a_name
      end

    set_path (a_name: like path)
        -- Set 'path' with 'a_name'.
      do
        path := a_name
      ensure
        path_set: path = a_name
      end

    set_port (a_name: like port)
        -- Set 'port' with 'a_name'.
      do
        port := a_name
      ensure
        port_set: port = a_name
      end

    set_scheme (a_name: like scheme)
        -- Set 'scheme' with 'a_name'.
      do
        scheme := a_name
      ensure
        scheme_set: scheme = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_HTTP_GET_ACTION%N")
        if attached host as l_host then
          Result.append ("%Nhost:")
          Result.append (l_host.out)
          Result.append ("%N")
        end
        if attached http_headers as l_http_headers then
          across l_http_headers as ic loop
            Result.append ("%N http_headers:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached path as l_path then
          Result.append ("%Npath:")
          Result.append (l_path.out)
          Result.append ("%N")
        end
        if attached port as l_port then
          Result.append ("%Nport:")
          Result.append (l_port.out)
          Result.append ("%N")
        end
        if attached scheme as l_scheme then
          Result.append ("%Nscheme:")
          Result.append (l_scheme.out)
          Result.append ("%N")
        end
      end
end

