note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_NODE_STATUS




feature --Access

    addresses: detachable LIST [IO_K8S_API_CORE_V1_NODE_ADDRESS]
      -- List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
    allocatable: detachable STRING_TABLE [STRING_32]
      -- Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    capacity: detachable STRING_TABLE [STRING_32]
      -- Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    conditions: detachable LIST [IO_K8S_API_CORE_V1_NODE_CONDITION]
      -- Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    config: detachable IO_K8S_API_CORE_V1_NODE_CONFIG_STATUS
      
    daemon_endpoints: detachable IO_K8S_API_CORE_V1_NODE_DAEMON_ENDPOINTS
      
    images: detachable LIST [IO_K8S_API_CORE_V1_CONTAINER_IMAGE]
      -- List of container images on this node
    node_info: detachable IO_K8S_API_CORE_V1_NODE_SYSTEM_INFO
      
    phase: detachable STRING_32
      -- NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.  Possible enum values:  - `\"Pending\"` means the node has been created/added by the system, but not configured.  - `\"Running\"` means the node has been configured and has Kubernetes components running.  - `\"Terminated\"` means the node has been removed from the cluster.
    volumes_attached: detachable LIST [IO_K8S_API_CORE_V1_ATTACHED_VOLUME]
      -- List of volumes that are attached to the node.
    volumes_in_use: detachable LIST [STRING_32]
      -- List of attachable volumes in use (mounted) by the node.

feature -- Change Element

    set_addresses (a_name: like addresses)
        -- Set 'addresses' with 'a_name'.
      do
        addresses := a_name
      ensure
        addresses_set: addresses = a_name
      end

    set_allocatable (a_name: like allocatable)
        -- Set 'allocatable' with 'a_name'.
      do
        allocatable := a_name
      ensure
        allocatable_set: allocatable = a_name
      end

    set_capacity (a_name: like capacity)
        -- Set 'capacity' with 'a_name'.
      do
        capacity := a_name
      ensure
        capacity_set: capacity = a_name
      end

    set_conditions (a_name: like conditions)
        -- Set 'conditions' with 'a_name'.
      do
        conditions := a_name
      ensure
        conditions_set: conditions = a_name
      end

    set_config (a_name: like config)
        -- Set 'config' with 'a_name'.
      do
        config := a_name
      ensure
        config_set: config = a_name
      end

    set_daemon_endpoints (a_name: like daemon_endpoints)
        -- Set 'daemon_endpoints' with 'a_name'.
      do
        daemon_endpoints := a_name
      ensure
        daemon_endpoints_set: daemon_endpoints = a_name
      end

    set_images (a_name: like images)
        -- Set 'images' with 'a_name'.
      do
        images := a_name
      ensure
        images_set: images = a_name
      end

    set_node_info (a_name: like node_info)
        -- Set 'node_info' with 'a_name'.
      do
        node_info := a_name
      ensure
        node_info_set: node_info = a_name
      end

    set_phase (a_name: like phase)
        -- Set 'phase' with 'a_name'.
      do
        phase := a_name
      ensure
        phase_set: phase = a_name
      end

    set_volumes_attached (a_name: like volumes_attached)
        -- Set 'volumes_attached' with 'a_name'.
      do
        volumes_attached := a_name
      ensure
        volumes_attached_set: volumes_attached = a_name
      end

    set_volumes_in_use (a_name: like volumes_in_use)
        -- Set 'volumes_in_use' with 'a_name'.
      do
        volumes_in_use := a_name
      ensure
        volumes_in_use_set: volumes_in_use = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_NODE_STATUS%N")
        if attached addresses as l_addresses then
          across l_addresses as ic loop
            Result.append ("%N addresses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached allocatable as l_allocatable then
          Result.append ("%Nallocatable:")
          across l_allocatable as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached capacity as l_capacity then
          Result.append ("%Ncapacity:")
          across l_capacity as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached conditions as l_conditions then
          across l_conditions as ic loop
            Result.append ("%N conditions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached config as l_config then
          Result.append ("%Nconfig:")
          Result.append (l_config.out)
          Result.append ("%N")
        end
        if attached daemon_endpoints as l_daemon_endpoints then
          Result.append ("%Ndaemon_endpoints:")
          Result.append (l_daemon_endpoints.out)
          Result.append ("%N")
        end
        if attached images as l_images then
          across l_images as ic loop
            Result.append ("%N images:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached node_info as l_node_info then
          Result.append ("%Nnode_info:")
          Result.append (l_node_info.out)
          Result.append ("%N")
        end
        if attached phase as l_phase then
          Result.append ("%Nphase:")
          Result.append (l_phase.out)
          Result.append ("%N")
        end
        if attached volumes_attached as l_volumes_attached then
          across l_volumes_attached as ic loop
            Result.append ("%N volumes_attached:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached volumes_in_use as l_volumes_in_use then
          across l_volumes_in_use as ic loop
            Result.append ("%N volumes_in_use:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

