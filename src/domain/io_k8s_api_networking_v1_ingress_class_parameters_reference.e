note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_NETWORKING_V1_INGRESS_CLASS_PARAMETERS_REFERENCE




feature --Access

    api_group: detachable STRING_32
      -- APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    kind: detachable STRING_32
      -- Kind is the type of resource being referenced.
    name: detachable STRING_32
      -- Name is the name of resource being referenced.
    namespace: detachable STRING_32
      -- Namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".
    scope: detachable STRING_32
      -- Scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".

feature -- Change Element

    set_api_group (a_name: like api_group)
        -- Set 'api_group' with 'a_name'.
      do
        api_group := a_name
      ensure
        api_group_set: api_group = a_name
      end

    set_kind (a_name: like kind)
        -- Set 'kind' with 'a_name'.
      do
        kind := a_name
      ensure
        kind_set: kind = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_namespace (a_name: like namespace)
        -- Set 'namespace' with 'a_name'.
      do
        namespace := a_name
      ensure
        namespace_set: namespace = a_name
      end

    set_scope (a_name: like scope)
        -- Set 'scope' with 'a_name'.
      do
        scope := a_name
      ensure
        scope_set: scope = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_NETWORKING_V1_INGRESS_CLASS_PARAMETERS_REFERENCE%N")
        if attached api_group as l_api_group then
          Result.append ("%Napi_group:")
          Result.append (l_api_group.out)
          Result.append ("%N")
        end
        if attached kind as l_kind then
          Result.append ("%Nkind:")
          Result.append (l_kind.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached namespace as l_namespace then
          Result.append ("%Nnamespace:")
          Result.append (l_namespace.out)
          Result.append ("%N")
        end
        if attached scope as l_scope then
          Result.append ("%Nscope:")
          Result.append (l_scope.out)
          Result.append ("%N")
        end
      end
end

