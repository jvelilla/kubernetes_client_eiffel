note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned


  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_LIMIT_RANGE_ITEM




feature --Access

    default_: detachable STRING_TABLE [STRING_32]
      -- Default resource requirement limit value by resource name if resource limit is omitted.
    default_request: detachable STRING_TABLE [STRING_32]
      -- DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
    max: detachable STRING_TABLE [STRING_32]
      -- Max usage constraints on this kind by resource name.
    max_limit_request_ratio: detachable STRING_TABLE [STRING_32]
      -- MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
    min: detachable STRING_TABLE [STRING_32]
      -- Min usage constraints on this kind by resource name.
    type: detachable STRING_32
      -- Type of resource that this limit applies to.  Possible enum values:  - `\"Container\"` Limit that applies to all containers in a namespace  - `\"PersistentVolumeClaim\"` Limit that applies to all persistent volume claims in a namespace  - `\"Pod\"` Limit that applies to all pods in a namespace

feature -- Change Element

    set_default (a_name: like default_)
        -- Set 'default' with 'a_name'.
      do
        default_ := a_name
      ensure
        default_set: default_ = a_name
      end

    set_default_request (a_name: like default_request)
        -- Set 'default_request' with 'a_name'.
      do
        default_request := a_name
      ensure
        default_request_set: default_request = a_name
      end

    set_max (a_name: like max)
        -- Set 'max' with 'a_name'.
      do
        max := a_name
      ensure
        max_set: max = a_name
      end

    set_max_limit_request_ratio (a_name: like max_limit_request_ratio)
        -- Set 'max_limit_request_ratio' with 'a_name'.
      do
        max_limit_request_ratio := a_name
      ensure
        max_limit_request_ratio_set: max_limit_request_ratio = a_name
      end

    set_min (a_name: like min)
        -- Set 'min' with 'a_name'.
      do
        min := a_name
      ensure
        min_set: min = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_LIMIT_RANGE_ITEM%N")
        if attached default_ as l_default then
          Result.append ("%Ndefault:")
          across l_default as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached default_request as l_default_request then
          Result.append ("%Ndefault_request:")
          across l_default_request as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached max as l_max then
          Result.append ("%Nmax:")
          across l_max as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached max_limit_request_ratio as l_max_limit_request_ratio then
          Result.append ("%Nmax_limit_request_ratio:")
          across l_max_limit_request_ratio as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached min as l_min then
          Result.append ("%Nmin:")
          across l_min as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
      end
end

