note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_LOAD_BALANCER_INGRESS




feature --Access

    hostname: detachable STRING_32
      -- Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
    ip: detachable STRING_32
      -- IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
    ports: detachable LIST [IO_K8S_API_CORE_V1_PORT_STATUS]
      -- Ports is a list of records of service ports If used, every port defined in the service should have an entry in it

feature -- Change Element

    set_hostname (a_name: like hostname)
        -- Set 'hostname' with 'a_name'.
      do
        hostname := a_name
      ensure
        hostname_set: hostname = a_name
      end

    set_ip (a_name: like ip)
        -- Set 'ip' with 'a_name'.
      do
        ip := a_name
      ensure
        ip_set: ip = a_name
      end

    set_ports (a_name: like ports)
        -- Set 'ports' with 'a_name'.
      do
        ports := a_name
      ensure
        ports_set: ports = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_LOAD_BALANCER_INGRESS%N")
        if attached hostname as l_hostname then
          Result.append ("%Nhostname:")
          Result.append (l_hostname.out)
          Result.append ("%N")
        end
        if attached ip as l_ip then
          Result.append ("%Nip:")
          Result.append (l_ip.out)
          Result.append ("%N")
        end
        if attached ports as l_ports then
          across l_ports as ic loop
            Result.append ("%N ports:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

