note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_STATUS




feature --Access

    access_modes: detachable LIST [STRING_32]
      -- AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    allocated_resources: detachable STRING_TABLE [STRING_32]
      -- The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    capacity: detachable STRING_TABLE [STRING_32]
      -- Represents the actual resources of the underlying volume.
    conditions: detachable LIST [IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_CONDITION]
      -- Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
    phase: detachable STRING_32
      -- Phase represents the current phase of PersistentVolumeClaim.  Possible enum values:  - `\"Bound\"` used for PersistentVolumeClaims that are bound  - `\"Lost\"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.  - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound
    resize_status: detachable STRING_32
      -- ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.

feature -- Change Element

    set_access_modes (a_name: like access_modes)
        -- Set 'access_modes' with 'a_name'.
      do
        access_modes := a_name
      ensure
        access_modes_set: access_modes = a_name
      end

    set_allocated_resources (a_name: like allocated_resources)
        -- Set 'allocated_resources' with 'a_name'.
      do
        allocated_resources := a_name
      ensure
        allocated_resources_set: allocated_resources = a_name
      end

    set_capacity (a_name: like capacity)
        -- Set 'capacity' with 'a_name'.
      do
        capacity := a_name
      ensure
        capacity_set: capacity = a_name
      end

    set_conditions (a_name: like conditions)
        -- Set 'conditions' with 'a_name'.
      do
        conditions := a_name
      ensure
        conditions_set: conditions = a_name
      end

    set_phase (a_name: like phase)
        -- Set 'phase' with 'a_name'.
      do
        phase := a_name
      ensure
        phase_set: phase = a_name
      end

    set_resize_status (a_name: like resize_status)
        -- Set 'resize_status' with 'a_name'.
      do
        resize_status := a_name
      ensure
        resize_status_set: resize_status = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_STATUS%N")
        if attached access_modes as l_access_modes then
          across l_access_modes as ic loop
            Result.append ("%N access_modes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached allocated_resources as l_allocated_resources then
          Result.append ("%Nallocated_resources:")
          across l_allocated_resources as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached capacity as l_capacity then
          Result.append ("%Ncapacity:")
          across l_capacity as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached conditions as l_conditions then
          across l_conditions as ic loop
            Result.append ("%N conditions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached phase as l_phase then
          Result.append ("%Nphase:")
          Result.append (l_phase.out)
          Result.append ("%N")
        end
        if attached resize_status as l_resize_status then
          Result.append ("%Nresize_status:")
          Result.append (l_resize_status.out)
          Result.append ("%N")
        end
      end
end

