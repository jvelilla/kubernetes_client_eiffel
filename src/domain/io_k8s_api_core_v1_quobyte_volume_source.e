note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_QUOBYTE_VOLUME_SOURCE




feature --Access

    group: detachable STRING_32
      -- Group to map volume access to Default is no group
 	read_only: BOOLEAN
    	 -- ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    registry: detachable STRING_32
      -- Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    tenant: detachable STRING_32
      -- Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    user: detachable STRING_32
      -- User to map volume access to Defaults to serivceaccount user
    volume: detachable STRING_32
      -- Volume is a string that references an already created Quobyte volume by name.

feature -- Change Element

    set_group (a_name: like group)
        -- Set 'group' with 'a_name'.
      do
        group := a_name
      ensure
        group_set: group = a_name
      end

    set_read_only (a_name: like read_only)
        -- Set 'read_only' with 'a_name'.
      do
        read_only := a_name
      ensure
        read_only_set: read_only = a_name
      end

    set_registry (a_name: like registry)
        -- Set 'registry' with 'a_name'.
      do
        registry := a_name
      ensure
        registry_set: registry = a_name
      end

    set_tenant (a_name: like tenant)
        -- Set 'tenant' with 'a_name'.
      do
        tenant := a_name
      ensure
        tenant_set: tenant = a_name
      end

    set_user (a_name: like user)
        -- Set 'user' with 'a_name'.
      do
        user := a_name
      ensure
        user_set: user = a_name
      end

    set_volume (a_name: like volume)
        -- Set 'volume' with 'a_name'.
      do
        volume := a_name
      ensure
        volume_set: volume = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_QUOBYTE_VOLUME_SOURCE%N")
        if attached group as l_group then
          Result.append ("%Ngroup:")
          Result.append (l_group.out)
          Result.append ("%N")
        end
        if attached read_only as l_read_only then
          Result.append ("%Nread_only:")
          Result.append (l_read_only.out)
          Result.append ("%N")
        end
        if attached registry as l_registry then
          Result.append ("%Nregistry:")
          Result.append (l_registry.out)
          Result.append ("%N")
        end
        if attached tenant as l_tenant then
          Result.append ("%Ntenant:")
          Result.append (l_tenant.out)
          Result.append ("%N")
        end
        if attached user as l_user then
          Result.append ("%Nuser:")
          Result.append (l_user.out)
          Result.append ("%N")
        end
        if attached volume as l_volume then
          Result.append ("%Nvolume:")
          Result.append (l_volume.out)
          Result.append ("%N")
        end
      end
end

