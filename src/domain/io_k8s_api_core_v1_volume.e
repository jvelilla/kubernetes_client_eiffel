note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_VOLUME




feature --Access

    aws_elastic_block_store: detachable IO_K8S_API_CORE_V1_AWS_ELASTIC_BLOCK_STORE_VOLUME_SOURCE
      
    azure_disk: detachable IO_K8S_API_CORE_V1_AZURE_DISK_VOLUME_SOURCE
      
    azure_file: detachable IO_K8S_API_CORE_V1_AZURE_FILE_VOLUME_SOURCE
      
    cephfs: detachable IO_K8S_API_CORE_V1_CEPH_FS_VOLUME_SOURCE
      
    cinder: detachable IO_K8S_API_CORE_V1_CINDER_VOLUME_SOURCE
      
    config_map: detachable IO_K8S_API_CORE_V1_CONFIG_MAP_VOLUME_SOURCE
      
    csi: detachable IO_K8S_API_CORE_V1_CSI_VOLUME_SOURCE
      
    downward_ap_i: detachable IO_K8S_API_CORE_V1_DOWNWARD_API_VOLUME_SOURCE
      
    empty_dir: detachable IO_K8S_API_CORE_V1_EMPTY_DIR_VOLUME_SOURCE
      
    ephemeral: detachable IO_K8S_API_CORE_V1_EPHEMERAL_VOLUME_SOURCE
      
    fc: detachable IO_K8S_API_CORE_V1_FC_VOLUME_SOURCE
      
    flex_volume: detachable IO_K8S_API_CORE_V1_FLEX_VOLUME_SOURCE
      
    flocker: detachable IO_K8S_API_CORE_V1_FLOCKER_VOLUME_SOURCE
      
    gce_persistent_disk: detachable IO_K8S_API_CORE_V1_GCE_PERSISTENT_DISK_VOLUME_SOURCE
      
    git_repo: detachable IO_K8S_API_CORE_V1_GIT_REPO_VOLUME_SOURCE
      
    glusterfs: detachable IO_K8S_API_CORE_V1_GLUSTERFS_VOLUME_SOURCE
      
    host_path: detachable IO_K8S_API_CORE_V1_HOST_PATH_VOLUME_SOURCE
      
    iscsi: detachable IO_K8S_API_CORE_V1_ISCSI_VOLUME_SOURCE
      
    name: detachable STRING_32
      -- Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    nfs: detachable IO_K8S_API_CORE_V1_NFS_VOLUME_SOURCE
      
    persistent_volume_claim: detachable IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_VOLUME_SOURCE
      
    photon_persistent_disk: detachable IO_K8S_API_CORE_V1_PHOTON_PERSISTENT_DISK_VOLUME_SOURCE
      
    portworx_volume: detachable IO_K8S_API_CORE_V1_PORTWORX_VOLUME_SOURCE
      
    projected: detachable IO_K8S_API_CORE_V1_PROJECTED_VOLUME_SOURCE
      
    quobyte: detachable IO_K8S_API_CORE_V1_QUOBYTE_VOLUME_SOURCE
      
    rbd: detachable IO_K8S_API_CORE_V1_RBD_VOLUME_SOURCE
      
    scale_io: detachable IO_K8S_API_CORE_V1_SCALE_IO_VOLUME_SOURCE
      
    secret: detachable IO_K8S_API_CORE_V1_SECRET_VOLUME_SOURCE
      
    storageos: detachable IO_K8S_API_CORE_V1_STORAGE_OS_VOLUME_SOURCE
      
    vsphere_volume: detachable IO_K8S_API_CORE_V1_VSPHERE_VIRTUAL_DISK_VOLUME_SOURCE
      

feature -- Change Element

    set_aws_elastic_block_store (a_name: like aws_elastic_block_store)
        -- Set 'aws_elastic_block_store' with 'a_name'.
      do
        aws_elastic_block_store := a_name
      ensure
        aws_elastic_block_store_set: aws_elastic_block_store = a_name
      end

    set_azure_disk (a_name: like azure_disk)
        -- Set 'azure_disk' with 'a_name'.
      do
        azure_disk := a_name
      ensure
        azure_disk_set: azure_disk = a_name
      end

    set_azure_file (a_name: like azure_file)
        -- Set 'azure_file' with 'a_name'.
      do
        azure_file := a_name
      ensure
        azure_file_set: azure_file = a_name
      end

    set_cephfs (a_name: like cephfs)
        -- Set 'cephfs' with 'a_name'.
      do
        cephfs := a_name
      ensure
        cephfs_set: cephfs = a_name
      end

    set_cinder (a_name: like cinder)
        -- Set 'cinder' with 'a_name'.
      do
        cinder := a_name
      ensure
        cinder_set: cinder = a_name
      end

    set_config_map (a_name: like config_map)
        -- Set 'config_map' with 'a_name'.
      do
        config_map := a_name
      ensure
        config_map_set: config_map = a_name
      end

    set_csi (a_name: like csi)
        -- Set 'csi' with 'a_name'.
      do
        csi := a_name
      ensure
        csi_set: csi = a_name
      end

    set_downward_ap_i (a_name: like downward_ap_i)
        -- Set 'downward_ap_i' with 'a_name'.
      do
        downward_ap_i := a_name
      ensure
        downward_ap_i_set: downward_ap_i = a_name
      end

    set_empty_dir (a_name: like empty_dir)
        -- Set 'empty_dir' with 'a_name'.
      do
        empty_dir := a_name
      ensure
        empty_dir_set: empty_dir = a_name
      end

    set_ephemeral (a_name: like ephemeral)
        -- Set 'ephemeral' with 'a_name'.
      do
        ephemeral := a_name
      ensure
        ephemeral_set: ephemeral = a_name
      end

    set_fc (a_name: like fc)
        -- Set 'fc' with 'a_name'.
      do
        fc := a_name
      ensure
        fc_set: fc = a_name
      end

    set_flex_volume (a_name: like flex_volume)
        -- Set 'flex_volume' with 'a_name'.
      do
        flex_volume := a_name
      ensure
        flex_volume_set: flex_volume = a_name
      end

    set_flocker (a_name: like flocker)
        -- Set 'flocker' with 'a_name'.
      do
        flocker := a_name
      ensure
        flocker_set: flocker = a_name
      end

    set_gce_persistent_disk (a_name: like gce_persistent_disk)
        -- Set 'gce_persistent_disk' with 'a_name'.
      do
        gce_persistent_disk := a_name
      ensure
        gce_persistent_disk_set: gce_persistent_disk = a_name
      end

    set_git_repo (a_name: like git_repo)
        -- Set 'git_repo' with 'a_name'.
      do
        git_repo := a_name
      ensure
        git_repo_set: git_repo = a_name
      end

    set_glusterfs (a_name: like glusterfs)
        -- Set 'glusterfs' with 'a_name'.
      do
        glusterfs := a_name
      ensure
        glusterfs_set: glusterfs = a_name
      end

    set_host_path (a_name: like host_path)
        -- Set 'host_path' with 'a_name'.
      do
        host_path := a_name
      ensure
        host_path_set: host_path = a_name
      end

    set_iscsi (a_name: like iscsi)
        -- Set 'iscsi' with 'a_name'.
      do
        iscsi := a_name
      ensure
        iscsi_set: iscsi = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_nfs (a_name: like nfs)
        -- Set 'nfs' with 'a_name'.
      do
        nfs := a_name
      ensure
        nfs_set: nfs = a_name
      end

    set_persistent_volume_claim (a_name: like persistent_volume_claim)
        -- Set 'persistent_volume_claim' with 'a_name'.
      do
        persistent_volume_claim := a_name
      ensure
        persistent_volume_claim_set: persistent_volume_claim = a_name
      end

    set_photon_persistent_disk (a_name: like photon_persistent_disk)
        -- Set 'photon_persistent_disk' with 'a_name'.
      do
        photon_persistent_disk := a_name
      ensure
        photon_persistent_disk_set: photon_persistent_disk = a_name
      end

    set_portworx_volume (a_name: like portworx_volume)
        -- Set 'portworx_volume' with 'a_name'.
      do
        portworx_volume := a_name
      ensure
        portworx_volume_set: portworx_volume = a_name
      end

    set_projected (a_name: like projected)
        -- Set 'projected' with 'a_name'.
      do
        projected := a_name
      ensure
        projected_set: projected = a_name
      end

    set_quobyte (a_name: like quobyte)
        -- Set 'quobyte' with 'a_name'.
      do
        quobyte := a_name
      ensure
        quobyte_set: quobyte = a_name
      end

    set_rbd (a_name: like rbd)
        -- Set 'rbd' with 'a_name'.
      do
        rbd := a_name
      ensure
        rbd_set: rbd = a_name
      end

    set_scale_io (a_name: like scale_io)
        -- Set 'scale_io' with 'a_name'.
      do
        scale_io := a_name
      ensure
        scale_io_set: scale_io = a_name
      end

    set_secret (a_name: like secret)
        -- Set 'secret' with 'a_name'.
      do
        secret := a_name
      ensure
        secret_set: secret = a_name
      end

    set_storageos (a_name: like storageos)
        -- Set 'storageos' with 'a_name'.
      do
        storageos := a_name
      ensure
        storageos_set: storageos = a_name
      end

    set_vsphere_volume (a_name: like vsphere_volume)
        -- Set 'vsphere_volume' with 'a_name'.
      do
        vsphere_volume := a_name
      ensure
        vsphere_volume_set: vsphere_volume = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_VOLUME%N")
        if attached aws_elastic_block_store as l_aws_elastic_block_store then
          Result.append ("%Naws_elastic_block_store:")
          Result.append (l_aws_elastic_block_store.out)
          Result.append ("%N")
        end
        if attached azure_disk as l_azure_disk then
          Result.append ("%Nazure_disk:")
          Result.append (l_azure_disk.out)
          Result.append ("%N")
        end
        if attached azure_file as l_azure_file then
          Result.append ("%Nazure_file:")
          Result.append (l_azure_file.out)
          Result.append ("%N")
        end
        if attached cephfs as l_cephfs then
          Result.append ("%Ncephfs:")
          Result.append (l_cephfs.out)
          Result.append ("%N")
        end
        if attached cinder as l_cinder then
          Result.append ("%Ncinder:")
          Result.append (l_cinder.out)
          Result.append ("%N")
        end
        if attached config_map as l_config_map then
          Result.append ("%Nconfig_map:")
          Result.append (l_config_map.out)
          Result.append ("%N")
        end
        if attached csi as l_csi then
          Result.append ("%Ncsi:")
          Result.append (l_csi.out)
          Result.append ("%N")
        end
        if attached downward_ap_i as l_downward_ap_i then
          Result.append ("%Ndownward_ap_i:")
          Result.append (l_downward_ap_i.out)
          Result.append ("%N")
        end
        if attached empty_dir as l_empty_dir then
          Result.append ("%Nempty_dir:")
          Result.append (l_empty_dir.out)
          Result.append ("%N")
        end
        if attached ephemeral as l_ephemeral then
          Result.append ("%Nephemeral:")
          Result.append (l_ephemeral.out)
          Result.append ("%N")
        end
        if attached fc as l_fc then
          Result.append ("%Nfc:")
          Result.append (l_fc.out)
          Result.append ("%N")
        end
        if attached flex_volume as l_flex_volume then
          Result.append ("%Nflex_volume:")
          Result.append (l_flex_volume.out)
          Result.append ("%N")
        end
        if attached flocker as l_flocker then
          Result.append ("%Nflocker:")
          Result.append (l_flocker.out)
          Result.append ("%N")
        end
        if attached gce_persistent_disk as l_gce_persistent_disk then
          Result.append ("%Ngce_persistent_disk:")
          Result.append (l_gce_persistent_disk.out)
          Result.append ("%N")
        end
        if attached git_repo as l_git_repo then
          Result.append ("%Ngit_repo:")
          Result.append (l_git_repo.out)
          Result.append ("%N")
        end
        if attached glusterfs as l_glusterfs then
          Result.append ("%Nglusterfs:")
          Result.append (l_glusterfs.out)
          Result.append ("%N")
        end
        if attached host_path as l_host_path then
          Result.append ("%Nhost_path:")
          Result.append (l_host_path.out)
          Result.append ("%N")
        end
        if attached iscsi as l_iscsi then
          Result.append ("%Niscsi:")
          Result.append (l_iscsi.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached nfs as l_nfs then
          Result.append ("%Nnfs:")
          Result.append (l_nfs.out)
          Result.append ("%N")
        end
        if attached persistent_volume_claim as l_persistent_volume_claim then
          Result.append ("%Npersistent_volume_claim:")
          Result.append (l_persistent_volume_claim.out)
          Result.append ("%N")
        end
        if attached photon_persistent_disk as l_photon_persistent_disk then
          Result.append ("%Nphoton_persistent_disk:")
          Result.append (l_photon_persistent_disk.out)
          Result.append ("%N")
        end
        if attached portworx_volume as l_portworx_volume then
          Result.append ("%Nportworx_volume:")
          Result.append (l_portworx_volume.out)
          Result.append ("%N")
        end
        if attached projected as l_projected then
          Result.append ("%Nprojected:")
          Result.append (l_projected.out)
          Result.append ("%N")
        end
        if attached quobyte as l_quobyte then
          Result.append ("%Nquobyte:")
          Result.append (l_quobyte.out)
          Result.append ("%N")
        end
        if attached rbd as l_rbd then
          Result.append ("%Nrbd:")
          Result.append (l_rbd.out)
          Result.append ("%N")
        end
        if attached scale_io as l_scale_io then
          Result.append ("%Nscale_io:")
          Result.append (l_scale_io.out)
          Result.append ("%N")
        end
        if attached secret as l_secret then
          Result.append ("%Nsecret:")
          Result.append (l_secret.out)
          Result.append ("%N")
        end
        if attached storageos as l_storageos then
          Result.append ("%Nstorageos:")
          Result.append (l_storageos.out)
          Result.append ("%N")
        end
        if attached vsphere_volume as l_vsphere_volume then
          Result.append ("%Nvsphere_volume:")
          Result.append (l_vsphere_volume.out)
          Result.append ("%N")
        end
      end
end

