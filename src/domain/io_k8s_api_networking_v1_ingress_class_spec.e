note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_NETWORKING_V1_INGRESS_CLASS_SPEC




feature --Access

    controller: detachable STRING_32
      -- Controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.
    parameters: detachable IO_K8S_API_NETWORKING_V1_INGRESS_CLASS_PARAMETERS_REFERENCE
      

feature -- Change Element

    set_controller (a_name: like controller)
        -- Set 'controller' with 'a_name'.
      do
        controller := a_name
      ensure
        controller_set: controller = a_name
      end

    set_parameters (a_name: like parameters)
        -- Set 'parameters' with 'a_name'.
      do
        parameters := a_name
      ensure
        parameters_set: parameters = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_NETWORKING_V1_INGRESS_CLASS_SPEC%N")
        if attached controller as l_controller then
          Result.append ("%Ncontroller:")
          Result.append (l_controller.out)
          Result.append ("%N")
        end
        if attached parameters as l_parameters then
          Result.append ("%Nparameters:")
          Result.append (l_parameters.out)
          Result.append ("%N")
        end
      end
end

