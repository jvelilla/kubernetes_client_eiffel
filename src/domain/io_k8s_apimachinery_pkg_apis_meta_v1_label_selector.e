note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR




feature --Access

    match_expressions: detachable LIST [IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR_REQUIREMENT]
      -- matchExpressions is a list of label selector requirements. The requirements are ANDed.
    match_labels: detachable STRING_TABLE [STRING_32]
      -- matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.

feature -- Change Element

    set_match_expressions (a_name: like match_expressions)
        -- Set 'match_expressions' with 'a_name'.
      do
        match_expressions := a_name
      ensure
        match_expressions_set: match_expressions = a_name
      end

    set_match_labels (a_name: like match_labels)
        -- Set 'match_labels' with 'a_name'.
      do
        match_labels := a_name
      ensure
        match_labels_set: match_labels = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR%N")
        if attached match_expressions as l_match_expressions then
          across l_match_expressions as ic loop
            Result.append ("%N match_expressions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached match_labels as l_match_labels then
          Result.append ("%Nmatch_labels:")
          across l_match_labels as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

