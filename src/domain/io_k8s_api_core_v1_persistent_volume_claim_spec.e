note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_SPEC




feature --Access

    access_modes: detachable LIST [STRING_32]
      -- AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    data_source: detachable IO_K8S_API_CORE_V1_TYPED_LOCAL_OBJECT_REFERENCE
      
    data_source_ref: detachable IO_K8S_API_CORE_V1_TYPED_LOCAL_OBJECT_REFERENCE
      
    resources: detachable IO_K8S_API_CORE_V1_RESOURCE_REQUIREMENTS
      
    selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      
    storage_class_name: detachable STRING_32
      -- Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volume_mode: detachable STRING_32
      -- volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    volume_name: detachable STRING_32
      -- VolumeName is the binding reference to the PersistentVolume backing this claim.

feature -- Change Element

    set_access_modes (a_name: like access_modes)
        -- Set 'access_modes' with 'a_name'.
      do
        access_modes := a_name
      ensure
        access_modes_set: access_modes = a_name
      end

    set_data_source (a_name: like data_source)
        -- Set 'data_source' with 'a_name'.
      do
        data_source := a_name
      ensure
        data_source_set: data_source = a_name
      end

    set_data_source_ref (a_name: like data_source_ref)
        -- Set 'data_source_ref' with 'a_name'.
      do
        data_source_ref := a_name
      ensure
        data_source_ref_set: data_source_ref = a_name
      end

    set_resources (a_name: like resources)
        -- Set 'resources' with 'a_name'.
      do
        resources := a_name
      ensure
        resources_set: resources = a_name
      end

    set_selector (a_name: like selector)
        -- Set 'selector' with 'a_name'.
      do
        selector := a_name
      ensure
        selector_set: selector = a_name
      end

    set_storage_class_name (a_name: like storage_class_name)
        -- Set 'storage_class_name' with 'a_name'.
      do
        storage_class_name := a_name
      ensure
        storage_class_name_set: storage_class_name = a_name
      end

    set_volume_mode (a_name: like volume_mode)
        -- Set 'volume_mode' with 'a_name'.
      do
        volume_mode := a_name
      ensure
        volume_mode_set: volume_mode = a_name
      end

    set_volume_name (a_name: like volume_name)
        -- Set 'volume_name' with 'a_name'.
      do
        volume_name := a_name
      ensure
        volume_name_set: volume_name = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_PERSISTENT_VOLUME_CLAIM_SPEC%N")
        if attached access_modes as l_access_modes then
          across l_access_modes as ic loop
            Result.append ("%N access_modes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached data_source as l_data_source then
          Result.append ("%Ndata_source:")
          Result.append (l_data_source.out)
          Result.append ("%N")
        end
        if attached data_source_ref as l_data_source_ref then
          Result.append ("%Ndata_source_ref:")
          Result.append (l_data_source_ref.out)
          Result.append ("%N")
        end
        if attached resources as l_resources then
          Result.append ("%Nresources:")
          Result.append (l_resources.out)
          Result.append ("%N")
        end
        if attached selector as l_selector then
          Result.append ("%Nselector:")
          Result.append (l_selector.out)
          Result.append ("%N")
        end
        if attached storage_class_name as l_storage_class_name then
          Result.append ("%Nstorage_class_name:")
          Result.append (l_storage_class_name.out)
          Result.append ("%N")
        end
        if attached volume_mode as l_volume_mode then
          Result.append ("%Nvolume_mode:")
          Result.append (l_volume_mode.out)
          Result.append ("%N")
        end
        if attached volume_name as l_volume_name then
          Result.append ("%Nvolume_name:")
          Result.append (l_volume_name.out)
          Result.append ("%N")
        end
      end
end

