note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned


  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS




feature --Access

    ref: detachable STRING_32

    schema: detachable STRING_32

    additional_items: detachable ANY
      -- JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
    additional_properties: detachable ANY
      -- JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
    all_of: detachable LIST [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS]

    any_of: detachable LIST [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS]

    default_: detachable ANY
      -- JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
    definitions: detachable STRING_TABLE [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS]

    dependencies: detachable STRING_TABLE [ANY]

    description: detachable STRING_32

    enum: detachable LIST [ANY]

    example: detachable ANY
      -- JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
 	exclusive_maximum: BOOLEAN

 	exclusive_minimum: BOOLEAN

    external_docs: detachable IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_EXTERNAL_DOCUMENTATION

    format: detachable STRING_32
      -- format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.
    id: detachable STRING_32

    items: detachable ANY
      -- JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
 	max_items: INTEGER_64

 	max_length: INTEGER_64

 	max_properties: INTEGER_64

 	maximum: REAL_64

 	min_items: INTEGER_64

 	min_length: INTEGER_64

 	min_properties: INTEGER_64

 	minimum: REAL_64

 	multiple_of: REAL_64

    var_not: detachable IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS

 	nullable: BOOLEAN

    one_of: detachable LIST [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS]

    pattern: detachable STRING_32

    pattern_properties: detachable STRING_TABLE [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS]

    properties: detachable STRING_TABLE [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS]

    required: detachable LIST [STRING_32]

    title: detachable STRING_32

    type: detachable STRING_32

 	unique_items: BOOLEAN

 	x_kubernetes_embedded_resource: BOOLEAN
    	 -- x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
 	x_kubernetes_int_or_string: BOOLEAN
    	 -- x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:  1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
    x_kubernetes_list_map_keys: detachable LIST [STRING_32]
      -- x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.  This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).  The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
    x_kubernetes_list_type: detachable STRING_32
      -- x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:  1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.
    x_kubernetes_map_type: detachable STRING_32
      -- x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:  1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.
 	x_kubernetes_preserve_unknown_fields: BOOLEAN
    	 -- x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
    x_kubernetes_validations: detachable LIST [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_VALIDATION_RULE]
      -- x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.

feature -- Change Element

    set_ref (a_name: like ref)
        -- Set 'ref' with 'a_name'.
      do
        ref := a_name
      ensure
        ref_set: ref = a_name
      end

    set_schema (a_name: like schema)
        -- Set 'schema' with 'a_name'.
      do
        schema := a_name
      ensure
        schema_set: schema = a_name
      end

    set_additional_items (a_name: like additional_items)
        -- Set 'additional_items' with 'a_name'.
      do
        additional_items := a_name
      ensure
        additional_items_set: additional_items = a_name
      end

    set_additional_properties (a_name: like additional_properties)
        -- Set 'additional_properties' with 'a_name'.
      do
        additional_properties := a_name
      ensure
        additional_properties_set: additional_properties = a_name
      end

    set_all_of (a_name: like all_of)
        -- Set 'all_of' with 'a_name'.
      do
        all_of := a_name
      ensure
        all_of_set: all_of = a_name
      end

    set_any_of (a_name: like any_of)
        -- Set 'any_of' with 'a_name'.
      do
        any_of := a_name
      ensure
        any_of_set: any_of = a_name
      end

    set_default (a_name: like default_)
        -- Set 'default' with 'a_name'.
      do
        default_ := a_name
      ensure
        default_set: default_ = a_name
      end

    set_definitions (a_name: like definitions)
        -- Set 'definitions' with 'a_name'.
      do
        definitions := a_name
      ensure
        definitions_set: definitions = a_name
      end

    set_dependencies (a_name: like dependencies)
        -- Set 'dependencies' with 'a_name'.
      do
        dependencies := a_name
      ensure
        dependencies_set: dependencies = a_name
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name
      end

    set_enum (a_name: like enum)
        -- Set 'enum' with 'a_name'.
      do
        enum := a_name
      ensure
        enum_set: enum = a_name
      end

    set_example (a_name: like example)
        -- Set 'example' with 'a_name'.
      do
        example := a_name
      ensure
        example_set: example = a_name
      end

    set_exclusive_maximum (a_name: like exclusive_maximum)
        -- Set 'exclusive_maximum' with 'a_name'.
      do
        exclusive_maximum := a_name
      ensure
        exclusive_maximum_set: exclusive_maximum = a_name
      end

    set_exclusive_minimum (a_name: like exclusive_minimum)
        -- Set 'exclusive_minimum' with 'a_name'.
      do
        exclusive_minimum := a_name
      ensure
        exclusive_minimum_set: exclusive_minimum = a_name
      end

    set_external_docs (a_name: like external_docs)
        -- Set 'external_docs' with 'a_name'.
      do
        external_docs := a_name
      ensure
        external_docs_set: external_docs = a_name
      end

    set_format (a_name: like format)
        -- Set 'format' with 'a_name'.
      do
        format := a_name
      ensure
        format_set: format = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_items (a_name: like items)
        -- Set 'items' with 'a_name'.
      do
        items := a_name
      ensure
        items_set: items = a_name
      end

    set_max_items (a_name: like max_items)
        -- Set 'max_items' with 'a_name'.
      do
        max_items := a_name
      ensure
        max_items_set: max_items = a_name
      end

    set_max_length (a_name: like max_length)
        -- Set 'max_length' with 'a_name'.
      do
        max_length := a_name
      ensure
        max_length_set: max_length = a_name
      end

    set_max_properties (a_name: like max_properties)
        -- Set 'max_properties' with 'a_name'.
      do
        max_properties := a_name
      ensure
        max_properties_set: max_properties = a_name
      end

    set_maximum (a_name: like maximum)
        -- Set 'maximum' with 'a_name'.
      do
        maximum := a_name
      ensure
        maximum_set: maximum = a_name
      end

    set_min_items (a_name: like min_items)
        -- Set 'min_items' with 'a_name'.
      do
        min_items := a_name
      ensure
        min_items_set: min_items = a_name
      end

    set_min_length (a_name: like min_length)
        -- Set 'min_length' with 'a_name'.
      do
        min_length := a_name
      ensure
        min_length_set: min_length = a_name
      end

    set_min_properties (a_name: like min_properties)
        -- Set 'min_properties' with 'a_name'.
      do
        min_properties := a_name
      ensure
        min_properties_set: min_properties = a_name
      end

    set_minimum (a_name: like minimum)
        -- Set 'minimum' with 'a_name'.
      do
        minimum := a_name
      ensure
        minimum_set: minimum = a_name
      end

    set_multiple_of (a_name: like multiple_of)
        -- Set 'multiple_of' with 'a_name'.
      do
        multiple_of := a_name
      ensure
        multiple_of_set: multiple_of = a_name
      end

    set_var_not (a_name: like var_not)
        -- Set 'var_not' with 'a_name'.
      do
        var_not := a_name
      ensure
        var_not_set: var_not = a_name
      end

    set_nullable (a_name: like nullable)
        -- Set 'nullable' with 'a_name'.
      do
        nullable := a_name
      ensure
        nullable_set: nullable = a_name
      end

    set_one_of (a_name: like one_of)
        -- Set 'one_of' with 'a_name'.
      do
        one_of := a_name
      ensure
        one_of_set: one_of = a_name
      end

    set_pattern (a_name: like pattern)
        -- Set 'pattern' with 'a_name'.
      do
        pattern := a_name
      ensure
        pattern_set: pattern = a_name
      end

    set_pattern_properties (a_name: like pattern_properties)
        -- Set 'pattern_properties' with 'a_name'.
      do
        pattern_properties := a_name
      ensure
        pattern_properties_set: pattern_properties = a_name
      end

    set_properties (a_name: like properties)
        -- Set 'properties' with 'a_name'.
      do
        properties := a_name
      ensure
        properties_set: properties = a_name
      end

    set_required (a_name: like required)
        -- Set 'required' with 'a_name'.
      do
        required := a_name
      ensure
        required_set: required = a_name
      end

    set_title (a_name: like title)
        -- Set 'title' with 'a_name'.
      do
        title := a_name
      ensure
        title_set: title = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_unique_items (a_name: like unique_items)
        -- Set 'unique_items' with 'a_name'.
      do
        unique_items := a_name
      ensure
        unique_items_set: unique_items = a_name
      end

    set_x_kubernetes_embedded_resource (a_name: like x_kubernetes_embedded_resource)
        -- Set 'x_kubernetes_embedded_resource' with 'a_name'.
      do
        x_kubernetes_embedded_resource := a_name
      ensure
        x_kubernetes_embedded_resource_set: x_kubernetes_embedded_resource = a_name
      end

    set_x_kubernetes_int_or_string (a_name: like x_kubernetes_int_or_string)
        -- Set 'x_kubernetes_int_or_string' with 'a_name'.
      do
        x_kubernetes_int_or_string := a_name
      ensure
        x_kubernetes_int_or_string_set: x_kubernetes_int_or_string = a_name
      end

    set_x_kubernetes_list_map_keys (a_name: like x_kubernetes_list_map_keys)
        -- Set 'x_kubernetes_list_map_keys' with 'a_name'.
      do
        x_kubernetes_list_map_keys := a_name
      ensure
        x_kubernetes_list_map_keys_set: x_kubernetes_list_map_keys = a_name
      end

    set_x_kubernetes_list_type (a_name: like x_kubernetes_list_type)
        -- Set 'x_kubernetes_list_type' with 'a_name'.
      do
        x_kubernetes_list_type := a_name
      ensure
        x_kubernetes_list_type_set: x_kubernetes_list_type = a_name
      end

    set_x_kubernetes_map_type (a_name: like x_kubernetes_map_type)
        -- Set 'x_kubernetes_map_type' with 'a_name'.
      do
        x_kubernetes_map_type := a_name
      ensure
        x_kubernetes_map_type_set: x_kubernetes_map_type = a_name
      end

    set_x_kubernetes_preserve_unknown_fields (a_name: like x_kubernetes_preserve_unknown_fields)
        -- Set 'x_kubernetes_preserve_unknown_fields' with 'a_name'.
      do
        x_kubernetes_preserve_unknown_fields := a_name
      ensure
        x_kubernetes_preserve_unknown_fields_set: x_kubernetes_preserve_unknown_fields = a_name
      end

    set_x_kubernetes_validations (a_name: like x_kubernetes_validations)
        -- Set 'x_kubernetes_validations' with 'a_name'.
      do
        x_kubernetes_validations := a_name
      ensure
        x_kubernetes_validations_set: x_kubernetes_validations = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_JSON_SCHEMA_PROPS%N")
        if attached ref as l_ref then
          Result.append ("%Nref:")
          Result.append (l_ref.out)
          Result.append ("%N")
        end
        if attached schema as l_schema then
          Result.append ("%Nschema:")
          Result.append (l_schema.out)
          Result.append ("%N")
        end
        if attached additional_items as l_additional_items then
          Result.append ("%Nadditional_items:")
          Result.append (l_additional_items.out)
          Result.append ("%N")
        end
        if attached additional_properties as l_additional_properties then
          Result.append ("%Nadditional_properties:")
          Result.append (l_additional_properties.out)
          Result.append ("%N")
        end
        if attached all_of as l_all_of then
          across l_all_of as ic loop
            Result.append ("%N all_of:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached any_of as l_any_of then
          across l_any_of as ic loop
            Result.append ("%N any_of:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached default_ as l_default then
          Result.append ("%Ndefault:")
          Result.append (l_default.out)
          Result.append ("%N")
        end
        if attached definitions as l_definitions then
          Result.append ("%Ndefinitions:")
          across l_definitions as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached dependencies as l_dependencies then
          Result.append ("%Ndependencies:")
          across l_dependencies as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")
        end
        if attached enum as l_enum then
          across l_enum as ic loop
            Result.append ("%N enum:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached example as l_example then
          Result.append ("%Nexample:")
          Result.append (l_example.out)
          Result.append ("%N")
        end
        if attached exclusive_maximum as l_exclusive_maximum then
          Result.append ("%Nexclusive_maximum:")
          Result.append (l_exclusive_maximum.out)
          Result.append ("%N")
        end
        if attached exclusive_minimum as l_exclusive_minimum then
          Result.append ("%Nexclusive_minimum:")
          Result.append (l_exclusive_minimum.out)
          Result.append ("%N")
        end
        if attached external_docs as l_external_docs then
          Result.append ("%Nexternal_docs:")
          Result.append (l_external_docs.out)
          Result.append ("%N")
        end
        if attached format as l_format then
          Result.append ("%Nformat:")
          Result.append (l_format.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached items as l_items then
          Result.append ("%Nitems:")
          Result.append (l_items.out)
          Result.append ("%N")
        end
        if attached max_items as l_max_items then
          Result.append ("%Nmax_items:")
          Result.append (l_max_items.out)
          Result.append ("%N")
        end
        if attached max_length as l_max_length then
          Result.append ("%Nmax_length:")
          Result.append (l_max_length.out)
          Result.append ("%N")
        end
        if attached max_properties as l_max_properties then
          Result.append ("%Nmax_properties:")
          Result.append (l_max_properties.out)
          Result.append ("%N")
        end
        if attached maximum as l_maximum then
          Result.append ("%Nmaximum:")
          Result.append (l_maximum.out)
          Result.append ("%N")
        end
        if attached min_items as l_min_items then
          Result.append ("%Nmin_items:")
          Result.append (l_min_items.out)
          Result.append ("%N")
        end
        if attached min_length as l_min_length then
          Result.append ("%Nmin_length:")
          Result.append (l_min_length.out)
          Result.append ("%N")
        end
        if attached min_properties as l_min_properties then
          Result.append ("%Nmin_properties:")
          Result.append (l_min_properties.out)
          Result.append ("%N")
        end
        if attached minimum as l_minimum then
          Result.append ("%Nminimum:")
          Result.append (l_minimum.out)
          Result.append ("%N")
        end
        if attached multiple_of as l_multiple_of then
          Result.append ("%Nmultiple_of:")
          Result.append (l_multiple_of.out)
          Result.append ("%N")
        end
        if attached var_not as l_var_not then
          Result.append ("%Nvar_not:")
          Result.append (l_var_not.out)
          Result.append ("%N")
        end
        if attached nullable as l_nullable then
          Result.append ("%Nnullable:")
          Result.append (l_nullable.out)
          Result.append ("%N")
        end
        if attached one_of as l_one_of then
          across l_one_of as ic loop
            Result.append ("%N one_of:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached pattern as l_pattern then
          Result.append ("%Npattern:")
          Result.append (l_pattern.out)
          Result.append ("%N")
        end
        if attached pattern_properties as l_pattern_properties then
          Result.append ("%Npattern_properties:")
          across l_pattern_properties as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached properties as l_properties then
          Result.append ("%Nproperties:")
          across l_properties as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached required as l_required then
          across l_required as ic loop
            Result.append ("%N required:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached title as l_title then
          Result.append ("%Ntitle:")
          Result.append (l_title.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached unique_items as l_unique_items then
          Result.append ("%Nunique_items:")
          Result.append (l_unique_items.out)
          Result.append ("%N")
        end
        if attached x_kubernetes_embedded_resource as l_x_kubernetes_embedded_resource then
          Result.append ("%Nx_kubernetes_embedded_resource:")
          Result.append (l_x_kubernetes_embedded_resource.out)
          Result.append ("%N")
        end
        if attached x_kubernetes_int_or_string as l_x_kubernetes_int_or_string then
          Result.append ("%Nx_kubernetes_int_or_string:")
          Result.append (l_x_kubernetes_int_or_string.out)
          Result.append ("%N")
        end
        if attached x_kubernetes_list_map_keys as l_x_kubernetes_list_map_keys then
          across l_x_kubernetes_list_map_keys as ic loop
            Result.append ("%N x_kubernetes_list_map_keys:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached x_kubernetes_list_type as l_x_kubernetes_list_type then
          Result.append ("%Nx_kubernetes_list_type:")
          Result.append (l_x_kubernetes_list_type.out)
          Result.append ("%N")
        end
        if attached x_kubernetes_map_type as l_x_kubernetes_map_type then
          Result.append ("%Nx_kubernetes_map_type:")
          Result.append (l_x_kubernetes_map_type.out)
          Result.append ("%N")
        end
        if attached x_kubernetes_preserve_unknown_fields as l_x_kubernetes_preserve_unknown_fields then
          Result.append ("%Nx_kubernetes_preserve_unknown_fields:")
          Result.append (l_x_kubernetes_preserve_unknown_fields.out)
          Result.append ("%N")
        end
        if attached x_kubernetes_validations as l_x_kubernetes_validations then
          across l_x_kubernetes_validations as ic loop
            Result.append ("%N x_kubernetes_validations:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

