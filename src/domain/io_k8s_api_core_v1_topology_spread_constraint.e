note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_API_CORE_V1_TOPOLOGY_SPREAD_CONSTRAINT




feature --Access

    label_selector: detachable IO_K8S_APIMACHINERY_PKG_APIS_META_V1_LABEL_SELECTOR
      
 	max_skew: INTEGER_32
    	 -- MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
    topology_key: detachable STRING_32
      -- TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.
    when_unsatisfiable: detachable STRING_32
      -- WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.  Possible enum values:  - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when constraints are not satisfied.  - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if constraints are not satisfied.

feature -- Change Element

    set_label_selector (a_name: like label_selector)
        -- Set 'label_selector' with 'a_name'.
      do
        label_selector := a_name
      ensure
        label_selector_set: label_selector = a_name
      end

    set_max_skew (a_name: like max_skew)
        -- Set 'max_skew' with 'a_name'.
      do
        max_skew := a_name
      ensure
        max_skew_set: max_skew = a_name
      end

    set_topology_key (a_name: like topology_key)
        -- Set 'topology_key' with 'a_name'.
      do
        topology_key := a_name
      ensure
        topology_key_set: topology_key = a_name
      end

    set_when_unsatisfiable (a_name: like when_unsatisfiable)
        -- Set 'when_unsatisfiable' with 'a_name'.
      do
        when_unsatisfiable := a_name
      ensure
        when_unsatisfiable_set: when_unsatisfiable = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_API_CORE_V1_TOPOLOGY_SPREAD_CONSTRAINT%N")
        if attached label_selector as l_label_selector then
          Result.append ("%Nlabel_selector:")
          Result.append (l_label_selector.out)
          Result.append ("%N")
        end
        if attached max_skew as l_max_skew then
          Result.append ("%Nmax_skew:")
          Result.append (l_max_skew.out)
          Result.append ("%N")
        end
        if attached topology_key as l_topology_key then
          Result.append ("%Ntopology_key:")
          Result.append (l_topology_key.out)
          Result.append ("%N")
        end
        if attached when_unsatisfiable as l_when_unsatisfiable then
          Result.append ("%Nwhen_unsatisfiable:")
          Result.append (l_when_unsatisfiable.out)
          Result.append ("%N")
        end
      end
end

