note
 description:"[
		Kubernetes
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: unversioned
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_CUSTOM_RESOURCE_DEFINITION_SPEC




feature --Access

    conversion: detachable IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_CUSTOM_RESOURCE_CONVERSION
      
    group: detachable STRING_32
      -- group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
    names: detachable IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_CUSTOM_RESOURCE_DEFINITION_NAMES
      
 	preserve_unknown_fields: BOOLEAN
    	 -- preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
    scope: detachable STRING_32
      -- scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
    versions: detachable LIST [IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_CUSTOM_RESOURCE_DEFINITION_VERSION]
      -- versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.

feature -- Change Element

    set_conversion (a_name: like conversion)
        -- Set 'conversion' with 'a_name'.
      do
        conversion := a_name
      ensure
        conversion_set: conversion = a_name
      end

    set_group (a_name: like group)
        -- Set 'group' with 'a_name'.
      do
        group := a_name
      ensure
        group_set: group = a_name
      end

    set_names (a_name: like names)
        -- Set 'names' with 'a_name'.
      do
        names := a_name
      ensure
        names_set: names = a_name
      end

    set_preserve_unknown_fields (a_name: like preserve_unknown_fields)
        -- Set 'preserve_unknown_fields' with 'a_name'.
      do
        preserve_unknown_fields := a_name
      ensure
        preserve_unknown_fields_set: preserve_unknown_fields = a_name
      end

    set_scope (a_name: like scope)
        -- Set 'scope' with 'a_name'.
      do
        scope := a_name
      ensure
        scope_set: scope = a_name
      end

    set_versions (a_name: like versions)
        -- Set 'versions' with 'a_name'.
      do
        versions := a_name
      ensure
        versions_set: versions = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass IO_K8S_APIEXTENSIONS_APISERVER_PKG_APIS_APIEXTENSIONS_V1_CUSTOM_RESOURCE_DEFINITION_SPEC%N")
        if attached conversion as l_conversion then
          Result.append ("%Nconversion:")
          Result.append (l_conversion.out)
          Result.append ("%N")
        end
        if attached group as l_group then
          Result.append ("%Ngroup:")
          Result.append (l_group.out)
          Result.append ("%N")
        end
        if attached names as l_names then
          Result.append ("%Nnames:")
          Result.append (l_names.out)
          Result.append ("%N")
        end
        if attached preserve_unknown_fields as l_preserve_unknown_fields then
          Result.append ("%Npreserve_unknown_fields:")
          Result.append (l_preserve_unknown_fields.out)
          Result.append ("%N")
        end
        if attached scope as l_scope then
          Result.append ("%Nscope:")
          Result.append (l_scope.out)
          Result.append ("%N")
        end
        if attached versions as l_versions then
          across l_versions as ic loop
            Result.append ("%N versions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

